{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-fkq7d",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Sbuy6",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-fkq7d{œdataTypeœ:œAgentœ,œidœ:œAgent-fkq7dœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-Sbuy6{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Sbuy6œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-fkq7d",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-fkq7dœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-Sbuy6",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Sbuy6œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-jjpaV",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-fkq7d",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-jjpaV{œdataTypeœ:œChatInputœ,œidœ:œChatInput-jjpaVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-fkq7d{œfieldNameœ:œinput_valueœ,œidœ:œAgent-fkq7dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-jjpaV",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-jjpaVœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-fkq7d",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-fkq7dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "AstraDB",
            "id": "AstraDB-c9ooW",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-fkq7d",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__AstraDB-c9ooW{œdataTypeœ:œAstraDBœ,œidœ:œAstraDB-c9ooWœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-fkq7d{œfieldNameœ:œtoolsœ,œidœ:œAgent-fkq7dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "AstraDB-c9ooW",
        "sourceHandle": "{œdataTypeœ:œAstraDBœ,œidœ:œAstraDB-c9ooWœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-fkq7d",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-fkq7dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CurrentDate",
            "id": "CurrentDate-wG7Hr",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-fkq7d",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CurrentDate-wG7Hr{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-wG7Hrœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-fkq7d{œfieldNameœ:œtoolsœ,œidœ:œAgent-fkq7dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CurrentDate-wG7Hr",
        "sourceHandle": "{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-wG7Hrœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-fkq7d",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-fkq7dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-jjpaV",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Hämta chattinmatningar från Playground.",
            "display_name": "Chattinmatning",
            "documentation": "https://docs.axiestudio.se/components-io#chat-input",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chattmeddelande",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Bakgrundsfärg",
                "dynamic": false,
                "info": "Bakgrundsfärgen för ikonen.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Ikon",
                "dynamic": false,
                "info": "Ikonen för meddelandet.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs.inputs import BoolInput\nfrom axiestudio.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chattinmatning\"\n    description = \"Hämta chattinmatningar från Playground.\"\n    documentation: str = \"https://docs.axiestudio.se/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Inmatningstext\",\n            value=\"\",\n            info=\"Meddelande som ska skickas som inmatning.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Lagra meddelanden\",\n            info=\"Lagra meddelandet i historiken.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Avsändartyp\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Typ av avsändare.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Avsändarnamn\",\n            info=\"Namn på avsändaren.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Sessions-ID\",\n            info=\"Sessions-ID för chatten. Om tom kommer den aktuella sessions-ID-parametern att användas.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Filer\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Filer som ska skickas med meddelandet.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Bakgrundsfärg\",\n            info=\"Bakgrundsfärgen för ikonen.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Ikon\",\n            info=\"Ikonen för meddelandet.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Textfärg\",\n            info=\"Textfärgen för namnet.\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chattmeddelande\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Filer",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Filer som ska skickas med meddelandet.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Inmatningstext",
                "dynamic": false,
                "info": "Meddelande som ska skickas som inmatning.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Avsändartyp",
                "dynamic": false,
                "info": "Typ av avsändare.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Avsändarnamn",
                "dynamic": false,
                "info": "Namn på avsändaren.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sessions-ID",
                "dynamic": false,
                "info": "Sessions-ID för chatten. Om tom kommer den aktuella sessions-ID-parametern att användas.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Lagra meddelanden",
                "dynamic": false,
                "info": "Lagra meddelandet i historiken.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Textfärg",
                "dynamic": false,
                "info": "Textfärgen för namnet.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "selected_output": "message",
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-jjpaV",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 2737.1136431518767,
          "y": 439.07234406842264
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-Sbuy6",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Visa ett chattmeddelande i Playground.",
            "display_name": "Chattutmatning",
            "documentation": "https://docs.axiestudio.org/components-io#chat-output",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Utmatningsmeddelande",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Bakgrundsfärg",
                "dynamic": false,
                "info": "Bakgrundsfärgen för ikonen.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Ikon",
                "dynamic": false,
                "info": "Ikonen för meddelandet.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Grundläggande datarensning",
                "dynamic": false,
                "info": "Om data ska rensas",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.helpers.data import safe_convert\nfrom axiestudio.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom axiestudio.schema.data import Data\nfrom axiestudio.schema.dataframe import DataFrame\nfrom axiestudio.schema.message import Message\nfrom axiestudio.schema.properties import Source\nfrom axiestudio.template.field.base import Output\nfrom axiestudio.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chattutmatning\"\n    description = \"Visa ett chattmeddelande i Playground.\"\n    documentation: str = \"https://docs.axiestudio.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inmatningar\",\n            info=\"Meddelande som ska skickas som utmatning.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Lagra meddelanden\",\n            info=\"Lagra meddelandet i historiken.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Avsändartyp\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Typ av avsändare.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Avsändarnamn\",\n            info=\"Namn på avsändaren.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Sessions-ID\",\n            info=\"Sessions-ID för chatten. Om tomt kommer den aktuella sessions-ID-parametern att användas.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Datamall\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Mall för att konvertera Data till Text. Om den lämnas tom kommer den att dynamiskt sättas till Datas textnyckel.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Bakgrundsfärg\",\n            info=\"Bakgrundsfärgen för ikonen.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Ikon\",\n            info=\"Ikonen för meddelandet.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Textfärg\",\n            info=\"Textfärgen för namnet\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Grundläggande datarensning\",\n            value=True,\n            info=\"Om data ska rensas\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Utmatningsmeddelande\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Förväntade Data eller DataFrame eller Message eller str, fick {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Förväntade Data eller DataFrame eller Message eller str, Generator eller None, fick {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Datamall",
                "dynamic": false,
                "info": "Mall för att konvertera Data till Text. Om den lämnas tom kommer den att dynamiskt sättas till Datas textnyckel.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Inmatningar",
                "dynamic": false,
                "info": "Meddelande som ska skickas som utmatning.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Avsändartyp",
                "dynamic": false,
                "info": "Typ av avsändare.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Avsändarnamn",
                "dynamic": false,
                "info": "Namn på avsändaren.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sessions-ID",
                "dynamic": false,
                "info": "Sessions-ID för chatten. Om tomt kommer den aktuella sessions-ID-parametern att användas.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Lagra meddelanden",
                "dynamic": false,
                "info": "Lagra meddelandet i historiken.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Textfärg",
                "dynamic": false,
                "info": "Textfärgen för namnet",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-Sbuy6",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 2724.482524234294,
          "y": 1295.3191383981932
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-fkq7d",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Definiera agentens instruktioner, ange sedan en uppgift att slutföra med verktyg.",
            "display_name": "Agent",
            "documentation": "https://docs.axiestudio.org/agents",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "format_instructions",
              "output_schema",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "last_updated": "2025-10-01T17:07:36.025Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Svar",
                "group_outputs": false,
                "hidden": null,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Strukturerat svar",
                "group_outputs": false,
                "hidden": null,
                "method": "json_response",
                "name": "structured_response",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": false,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Aktuellt datum",
                "dynamic": false,
                "info": "Om sant, kommer att lägga till ett verktyg till agenten som returnerar aktuellt datum.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agentbeskrivning [Föråldrad]",
                "dynamic": false,
                "info": "Beskrivningen av agenten. Detta används endast i verktygsläge. Standard är 'En hjälpsam assistent med tillgång till följande verktyg:' och verktyg läggs till dynamiskt. Denna funktion är föråldrad och kommer att tas bort i framtida versioner.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Modellleverantör",
                "dynamic": false,
                "info": "Leverantören av språkmodellen som agenten kommer att använda för att generera svar.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "Groq",
                  "OpenAI",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API-nyckel",
                "dynamic": false,
                "info": "OpenAI API-nyckeln att använda för OpenAI-modellen.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "${OPENAI_API_KEY}"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\n\nfrom langchain_core.tools import StructuredTool\nfrom pydantic import ValidationError\n\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.base.agents.events import ExceptionWithMessageError\nfrom axiestudio.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom axiestudio.base.models.model_utils import get_model_name\nfrom axiestudio.components.helpers.current_date import CurrentDateComponent\nfrom axiestudio.components.helpers.memory import MemoryComponent\nfrom axiestudio.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom axiestudio.custom.custom_component.component import _get_component_toolkit\nfrom axiestudio.custom.utils import update_component_build_config\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.helpers.base_model import build_model_from_schema\nfrom axiestudio.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output, TableInput\nfrom axiestudio.logging import logger\nfrom axiestudio.schema.data import Data\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.schema.message import Message\nfrom axiestudio.schema.table import EditMode\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Definiera agentens instruktioner, ange sedan en uppgift att slutföra med verktyg.\"\n    documentation: str = \"https://docs.axiestudio.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    # Filter out json_mode from OpenAI inputs since we handle structured output differently\n    openai_inputs_filtered = [\n        input_field\n        for input_field in MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"]\n        if not (hasattr(input_field, \"name\") and input_field.name == \"json_mode\")\n    ]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Modellleverantör\",\n            info=\"Leverantören av språkmodellen som agenten kommer att använda för att generera svar.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *openai_inputs_filtered,\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agentinstruktioner\",\n            info=\"Systemprompt: Initiala instruktioner och kontext som ges för att vägleda agentens beteende.\",\n            value=\"Du är en hjälpsam assistent som kan använda verktyg för att svara på frågor och utföra uppgifter.\",\n            advanced=False,\n        ),\n        MultilineInput(\n            name=\"format_instructions\",\n            display_name=\"Instruktioner för utdataformat\",\n            info=\"Generisk mall för strukturerad utdataformatering. Gäller endast med strukturerat svar.\",\n            value=(\n                \"Du är en AI som extraherar strukturerade JSON-objekt från ostrukturerad text. \"\n                \"Använd ett fördefinierat schema med förväntade typer (str, int, float, bool, dict). \"\n                \"Extrahera ALLA relevanta instanser som matchar schemat - om flera mönster finns, fånga dem alla. \"\n                \"Fyll saknade eller tvetydiga värden med standardvärden: null för saknade värden. \"\n                \"Ta bort exakta dubbletter men behåll variationer som har olika fältvärden. \"\n                \"Returnera alltid giltig JSON i förväntat format, kasta aldrig fel. \"\n                \"Om flera objekt kan extraheras, returnera dem alla i det strukturerade formatet.\"\n            ),\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Utdataschema\",\n            info=(\n                \"Schemavalidering: Definiera strukturen och datatyperna för strukturerad utdata. \"\n                \"Ingen validering om inget utdataschema.\"\n            ),\n            advanced=True,\n            required=False,\n            value=[],\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Namn\",\n                    \"type\": \"str\",\n                    \"description\": \"Ange namnet på utdatafältet.\",\n                    \"default\": \"fält\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Beskrivning\",\n                    \"type\": \"str\",\n                    \"description\": \"Beskriv syftet med utdatafältet.\",\n                    \"default\": \"beskrivning av fält\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Typ\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\"Ange datatypen för utdatafältet (t.ex. str, int, float, bool, dict).\"),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Som lista\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Sätt till True om detta utdatafält ska vara en lista av den angivna typen.\",\n                    \"default\": \"False\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n            ],\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Antal chatthistorikmeddelanden\",\n            value=100,\n            info=\"Antal chatthistorikmeddelanden att hämta.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Aktuellt datum\",\n            advanced=True,\n            info=\"Om sant, kommer att lägga till ett verktyg till agenten som returnerar aktuellt datum.\",\n            value=True,\n        ),\n    ]\n    outputs = [\n        Output(name=\"response\", display_name=\"Svar\", method=\"message_response\"),\n        Output(name=\"structured_response\", display_name=\"Strukturerat svar\", method=\"json_response\", tool_mode=False),\n    ]\n\n    async def get_agent_requirements(self):\n        \"\"\"Get the agent requirements for the agent.\"\"\"\n        llm_model, display_name = await self.get_llm()\n        if llm_model is None:\n            msg = \"Ingen språkmodell vald. Välj en modell för att fortsätta.\"\n            raise ValueError(msg)\n        self.model_name = get_model_name(llm_model, display_name=display_name)\n\n        # Get memory data\n        self.chat_history = await self.get_memory_data()\n        if isinstance(self.chat_history, Message):\n            self.chat_history = [self.chat_history]\n\n        # Add current date tool if enabled\n        if self.add_current_date_tool:\n            if not isinstance(self.tools, list):  # type: ignore[has-type]\n                self.tools = []\n            current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n            if not isinstance(current_date_tool, StructuredTool):\n                msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                raise TypeError(msg)\n            self.tools.append(current_date_tool)\n        return llm_model, self.chat_history, self.tools\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            result = await self.run_agent(agent)\n\n            # Store result for potential JSON output\n            self._agent_result = result\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        # Avoid catching blind Exception; let truly unexpected exceptions propagate\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n        else:\n            return result\n\n    def _preprocess_schema(self, schema):\n        \"\"\"Preprocess schema to ensure correct data types for build_model_from_schema.\"\"\"\n        processed_schema = []\n        for field in schema:\n            processed_field = {\n                \"name\": str(field.get(\"name\", \"field\")),\n                \"type\": str(field.get(\"type\", \"str\")),\n                \"description\": str(field.get(\"description\", \"\")),\n                \"multiple\": field.get(\"multiple\", False),\n            }\n            # Ensure multiple is handled correctly\n            if isinstance(processed_field[\"multiple\"], str):\n                processed_field[\"multiple\"] = processed_field[\"multiple\"].lower() in [\"true\", \"1\", \"t\", \"y\", \"yes\"]\n            processed_schema.append(processed_field)\n        return processed_schema\n\n    async def build_structured_output_base(self, content: str):\n        \"\"\"Build structured output with optional BaseModel validation.\"\"\"\n        json_pattern = r\"\\{.*\\}\"\n        schema_error_msg = \"Try setting an output schema\"\n\n        # Try to parse content as JSON first\n        json_data = None\n        try:\n            json_data = json.loads(content)\n        except json.JSONDecodeError:\n            json_match = re.search(json_pattern, content, re.DOTALL)\n            if json_match:\n                try:\n                    json_data = json.loads(json_match.group())\n                except json.JSONDecodeError:\n                    return {\"content\": content, \"error\": schema_error_msg}\n            else:\n                return {\"content\": content, \"error\": schema_error_msg}\n\n        # If no output schema provided, return parsed JSON without validation\n        if not hasattr(self, \"output_schema\") or not self.output_schema or len(self.output_schema) == 0:\n            return json_data\n\n        # Use BaseModel validation with schema\n        try:\n            processed_schema = self._preprocess_schema(self.output_schema)\n            output_model = build_model_from_schema(processed_schema)\n\n            # Validate against the schema\n            if isinstance(json_data, list):\n                # Multiple objects\n                validated_objects = []\n                for item in json_data:\n                    try:\n                        validated_obj = output_model.model_validate(item)\n                        validated_objects.append(validated_obj.model_dump())\n                    except ValidationError as e:\n                        logger.error(f\"Validation error for item: {e}\")\n                        # Include invalid items with error info\n                        validated_objects.append({\"data\": item, \"validation_error\": str(e)})\n                return validated_objects\n\n            # Single object\n            try:\n                validated_obj = output_model.model_validate(json_data)\n                return [validated_obj.model_dump()]  # Return as list for consistency\n            except ValidationError as e:\n                logger.error(f\"Validation error: {e}\")\n                return [{\"data\": json_data, \"validation_error\": str(e)}]\n\n        except (TypeError, ValueError) as e:\n            logger.error(f\"Error building structured output: {e}\")\n            # Fallback to parsed JSON without validation\n            return json_data\n\n    async def json_response(self) -> Data:\n        \"\"\"Convert agent response to structured JSON Data output with schema validation.\"\"\"\n        # Always use structured chat agent for JSON response mode for better JSON formatting\n        try:\n            system_components = []\n\n            # 1. Agent Instructions (system_prompt)\n            agent_instructions = getattr(self, \"system_prompt\", \"\") or \"\"\n            if agent_instructions:\n                system_components.append(f\"{agent_instructions}\")\n\n            # 2. Format Instructions\n            format_instructions = getattr(self, \"format_instructions\", \"\") or \"\"\n            if format_instructions:\n                system_components.append(f\"Format instructions: {format_instructions}\")\n\n            # 3. Schema Information from BaseModel\n            if hasattr(self, \"output_schema\") and self.output_schema and len(self.output_schema) > 0:\n                try:\n                    processed_schema = self._preprocess_schema(self.output_schema)\n                    output_model = build_model_from_schema(processed_schema)\n                    schema_dict = output_model.model_json_schema()\n                    schema_info = (\n                        \"You are given some text that may include format instructions, \"\n                        \"explanations, or other content alongside a JSON schema.\\n\\n\"\n                        \"Your task:\\n\"\n                        \"- Extract only the JSON schema.\\n\"\n                        \"- Return it as valid JSON.\\n\"\n                        \"- Do not include format instructions, explanations, or extra text.\\n\\n\"\n                        \"Input:\\n\"\n                        f\"{json.dumps(schema_dict, indent=2)}\\n\\n\"\n                        \"Output (only JSON schema):\"\n                    )\n                    system_components.append(schema_info)\n                except (ValidationError, ValueError, TypeError, KeyError) as e:\n                    logger.error(f\"Could not build schema for prompt: {e}\", exc_info=True)\n\n            # Combine all components\n            combined_instructions = \"\\n\\n\".join(system_components) if system_components else \"\"\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=combined_instructions,\n            )\n\n            # Create and run structured chat agent\n            try:\n                structured_agent = self.create_agent_runnable()\n            except (NotImplementedError, ValueError, TypeError) as e:\n                logger.error(f\"Error with structured chat agent: {e}\")\n                raise\n            try:\n                result = await self.run_agent(structured_agent)\n            except (ExceptionWithMessageError, ValueError, TypeError, RuntimeError) as e:\n                logger.error(f\"Error with structured agent result: {e}\")\n                raise\n            # Extract content from structured agent result\n            if hasattr(result, \"content\"):\n                content = result.content\n            elif hasattr(result, \"text\"):\n                content = result.text\n            else:\n                content = str(result)\n\n        except (ExceptionWithMessageError, ValueError, TypeError, NotImplementedError, AttributeError) as e:\n            logger.error(f\"Error with structured chat agent: {e}\")\n            # Fallback to regular agent\n            content_str = \"No content returned from agent\"\n            return Data(data={\"content\": content_str, \"error\": str(e)})\n\n        # Process with structured output validation\n        try:\n            structured_output = await self.build_structured_output_base(content)\n\n            # Handle different output formats\n            if isinstance(structured_output, list) and structured_output:\n                if len(structured_output) == 1:\n                    return Data(data=structured_output[0])\n                return Data(data={\"results\": structured_output})\n            if isinstance(structured_output, dict):\n                return Data(data=structured_output)\n            return Data(data={\"content\": content})\n\n        except (ValueError, TypeError) as e:\n            logger.error(f\"Error in structured output processing: {e}\")\n            return Data(data={\"content\": content, \"error\": str(e)})\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    async def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Ogiltig modellleverantör: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except (AttributeError, ValueError, TypeError, RuntimeError) as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Misslyckades med att initialisera språkmodell: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            # Filter out json_mode and only use attributes that exist on this component\n            model_kwargs = {}\n            for input_ in inputs:\n                if hasattr(self, f\"{prefix}{input_.name}\"):\n                    model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Språkmodell\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "format_instructions": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Instruktioner för utdataformat",
                "dynamic": false,
                "info": "Generisk mall för strukturerad utdataformatering. Gäller endast med strukturerat svar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "format_instructions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an AI that extracts structured JSON objects from unstructured text. Use a predefined schema with expected types (str, int, float, bool, dict). Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. Fill missing or ambiguous values with defaults: null for missing values. Remove exact duplicates but keep variations that have different field values. Always return valid JSON in the expected format, never throw errors. If multiple objects can be extracted, return them all in the structured format."
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Hantera tolkningsfel",
                "dynamic": false,
                "info": "Ska agenten fixa fel när den läser användarindata för bättre bearbetning?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Indata",
                "dynamic": false,
                "info": "Indatan som användaren tillhandahåller för agenten att bearbeta.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max iterationer",
                "dynamic": false,
                "info": "Maximalt antal försök agenten kan göra för att slutföra sin uppgift innan den stannar.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max återförsök",
                "dynamic": false,
                "info": "Maximalt antal återförsök att göra vid generering.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max tokens",
                "dynamic": false,
                "info": "Maximalt antal tokens att generera. Sätt till 0 för obegränsade tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Modell-kwargs",
                "dynamic": false,
                "info": "Ytterligare nyckelordsargument att skicka till modellen.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Modellnamn",
                "dynamic": false,
                "info": "För att se modellnamnen, välj först en leverantör. Ange sedan din API-nyckel och klicka på uppdateringsknappen bredvid modellnamnet.",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Antal chatthistorikmeddelanden",
                "dynamic": false,
                "info": "Antal chatthistorikmeddelanden att hämta.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API-bas",
                "dynamic": false,
                "info": "Bas-URL:en för OpenAI API. Standard är https://api.openai.com/v1. Du kan ändra detta för att använda andra API:er som JinaChat, LocalAI och Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "output_schema": {
                "_input_type": "TableInput",
                "advanced": true,
                "display_name": "Utdataschema",
                "dynamic": false,
                "info": "Schemavalidering: Definiera strukturen och datatyperna för strukturerad utdata. Ingen validering om inget utdataschema.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "output_schema",
                "placeholder": "",
                "required": false,
                "show": true,
                "table_icon": "Table",
                "table_schema": {
                  "columns": [
                    {
                      "default": "fält",
                      "description": "Ange namnet på utdatafältet.",
                      "disable_edit": false,
                      "display_name": "Namn",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "name",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "beskrivning av fält",
                      "description": "Beskriv syftet med utdatafältet.",
                      "disable_edit": false,
                      "display_name": "Beskrivning",
                      "edit_mode": "popover",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "description",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "str",
                      "description": "Ange datatypen för utdatafältet (t.ex. str, int, float, bool, dict).",
                      "disable_edit": false,
                      "display_name": "Typ",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "type",
                      "options": [
                        "str",
                        "int",
                        "float",
                        "bool",
                        "dict"
                      ],
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": false,
                      "description": "Sätt till True om detta utdatafält ska vara en lista av den angivna typen.",
                      "disable_edit": false,
                      "display_name": "Som lista",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "boolean",
                      "hidden": false,
                      "name": "multiple",
                      "sortable": true,
                      "type": "boolean"
                    }
                  ]
                },
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "trigger_icon": "Table",
                "trigger_text": "Open table",
                "type": "table",
                "value": []
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Frö",
                "dynamic": false,
                "info": "Fröet kontrollerar reproducerbarheten av jobbet.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agentinstruktioner",
                "dynamic": false,
                "info": "Systemprompt: Initiala instruktioner och kontext som ges för att vägleda agentens beteende.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful receptionist - that can answer company information, check availability and send email confirmation via our toolset! \n\nYour tool set! \n-Composion = google gmail and calendar! YOU KNOW WHAT TO DO WITH THAT! \n-you also have = GET_CURRENT_DATE = making sure you are aware of the specific time = the time tools is set for stockholm Europe YEAR = 2025! \n-Lastly you have our database which you will use to give / inform users of our company! THe database has all information for the company! \n\n\n\n\nBE KIND, PROFESSIONAL AND USE ALL THE TOOLS THAT YOU HAVE! REMEMBER THAT! \nIMPORANT! = USE ALL YOUR TOOLS! \n\n\nservices!\n\nname:\nlink:https://www.bokadirekt.se/boka-tjanst/catarinas-massage-halsa-49109/behandlande-massage-60-min-1968392"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperatur",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "Timeout för förfrågningar till OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Verktyg",
                "dynamic": false,
                "info": "Detta är verktygen som agenten kan använda för att hjälpa till med uppgifter.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Utförlig",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "selected_output": "response",
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-fkq7d",
        "measured": {
          "height": 591,
          "width": 320
        },
        "position": {
          "x": 2682.8207925694346,
          "y": 589.0496685120481
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "AstraDB-c9ooW",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "VectorStore"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Mata in och sök dokument i Astra DB",
            "display_name": "Astra DB",
            "documentation": "https://docs.axiestudio.se",
            "edited": false,
            "field_order": [
              "token",
              "environment",
              "database_name",
              "api_endpoint",
              "keyspace",
              "collection_name",
              "embedding_model",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "search_method",
              "reranker",
              "lexical_terms",
              "number_of_results",
              "search_type",
              "search_score_threshold",
              "advanced_search_filter",
              "autodetect_collection",
              "content_field",
              "deletion_field",
              "ignore_invalid_documents",
              "astradb_vectorstore_kwargs"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "last_updated": "2025-10-01T17:07:36.027Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Verktygsuppsättning",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "advanced_search_filter": {
                "_input_type": "NestedDictInput",
                "advanced": true,
                "display_name": "Search Metadata Filter",
                "dynamic": false,
                "info": "Optional dictionary of filters to apply to the search query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "advanced_search_filter",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "NestedDict",
                "value": {}
              },
              "api_endpoint": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Astra DB API Endpoint",
                "dynamic": false,
                "info": "The API Endpoint for the Astra DB instance. Supercedes database selection.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "api_endpoint",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "https://f9be8c5b-505c-460c-a610-80b66bf5fd58-us-east-2.apps.astra.datastax.com"
              },
              "astradb_vectorstore_kwargs": {
                "_input_type": "NestedDictInput",
                "advanced": true,
                "display_name": "AstraDBVectorStore Parameters",
                "dynamic": false,
                "info": "Optional dictionary of additional parameters for the AstraDBVectorStore.",
                "list": false,
                "list_add_label": "Add More",
                "name": "astradb_vectorstore_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "NestedDict",
                "value": {}
              },
              "autodetect_collection": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Autodetect Collection",
                "dynamic": false,
                "info": "Boolean flag to determine whether to autodetect the collection.",
                "list": false,
                "list_add_label": "Add More",
                "name": "autodetect_collection",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\nfrom collections import defaultdict\nfrom dataclasses import asdict, dataclass, field\n\nfrom astrapy import DataAPIClient, Database\nfrom astrapy.data.info.reranking import RerankServiceOptions\nfrom astrapy.info import CollectionDescriptor, CollectionLexicalOptions, CollectionRerankOptions\nfrom langchain_astradb import AstraDBVectorStore, VectorServiceOptions\nfrom langchain_astradb.utils.astradb import HybridSearchMode, _AstraDBCollectionEnvironment\nfrom langchain_core.documents import Document\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.vector_store_connection_decorator import vector_store_connection\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.inputs.inputs import FloatInput, NestedDictInput\nfrom axiestudio.io import (\n    BoolInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    QueryInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom axiestudio.schema.data import Data\nfrom axiestudio.serialization import serialize\nfrom axiestudio.utils.version import get_version_info\n\n\n@vector_store_connection\nclass AstraDBVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Mata in och sök dokument i Astra DB\"\n    documentation: str = \"https://docs.axiestudio.se\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vector_store: AstraDBVectorStore | None = None\n\n    @dataclass\n    class NewDatabaseInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_database\",\n                        \"description\": \"Vänligen tillåt flera minuter för att skapandet ska slutföras.\",\n                        \"display_name\": \"Skapa ny databas\",\n                        \"field_order\": [\"01_new_database_name\", \"02_cloud_provider\", \"03_region\"],\n                        \"template\": {\n                            \"01_new_database_name\": StrInput(\n                                name=\"new_database_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new database to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_cloud_provider\": DropdownInput(\n                                name=\"cloud_provider\",\n                                display_name=\"Cloud provider\",\n                                info=\"Cloud provider for the new database.\",\n                                options=[],\n                                required=True,\n                                real_time_refresh=True,\n                            ),\n                            \"03_region\": DropdownInput(\n                                name=\"region\",\n                                display_name=\"Region\",\n                                info=\"Region for the new database.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    @dataclass\n    class NewCollectionInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_collection\",\n                        \"description\": \"Please allow several seconds for creation to complete.\",\n                        \"display_name\": \"Create new collection\",\n                        \"field_order\": [\n                            \"01_new_collection_name\",\n                            \"02_embedding_generation_provider\",\n                            \"03_embedding_generation_model\",\n                            \"04_dimension\",\n                        ],\n                        \"template\": {\n                            \"01_new_collection_name\": StrInput(\n                                name=\"new_collection_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new collection to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_embedding_generation_provider\": DropdownInput(\n                                name=\"embedding_generation_provider\",\n                                display_name=\"Embedding generation method\",\n                                info=\"Provider to use for generating embeddings.\",\n                                helper_text=(\n                                    \"To create collections with more embedding provider options, go to \"\n                                    '<a class=\"underline\" href=\"https://astra.datastax.com/\" target=\" _blank\" '\n                                    'rel=\"noopener noreferrer\">your database in Astra DB</a>'\n                                ),\n                                real_time_refresh=True,\n                                required=True,\n                                options=[],\n                            ),\n                            \"03_embedding_generation_model\": DropdownInput(\n                                name=\"embedding_generation_model\",\n                                display_name=\"Embedding model\",\n                                info=\"Model to use for generating embeddings.\",\n                                real_time_refresh=True,\n                                options=[],\n                            ),\n                            \"04_dimension\": IntInput(\n                                name=\"dimension\",\n                                display_name=\"Dimensions\",\n                                info=\"Dimensions of the embeddings to generate.\",\n                                value=None,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        DropdownInput(\n            name=\"environment\",\n            display_name=\"Environment\",\n            info=\"The environment for the Astra DB API Endpoint.\",\n            options=[\"prod\", \"test\", \"dev\"],\n            value=\"prod\",\n            advanced=True,\n            real_time_refresh=True,\n            combobox=True,\n        ),\n        DropdownInput(\n            name=\"database_name\",\n            display_name=\"Database\",\n            info=\"The Database name for the Astra DB instance.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewDatabaseInput()),\n            combobox=True,\n        ),\n        StrInput(\n            name=\"api_endpoint\",\n            display_name=\"Astra DB API Endpoint\",\n            info=\"The API Endpoint for the Astra DB instance. Supercedes database selection.\",\n            show=False,\n        ),\n        DropdownInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n            options=[],\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"collection_name\",\n            display_name=\"Collection\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewCollectionInput()),\n            combobox=True,\n            show=False,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Specify the Embedding Model. Not required for Astra Vectorize collections.\",\n            required=False,\n            show=False,\n        ),\n        *LCVectorStoreComponent.inputs,\n        DropdownInput(\n            name=\"search_method\",\n            display_name=\"Search Method\",\n            info=(\n                \"Determine how your content is matched: Vector finds semantic similarity, \"\n                \"and Hybrid Search (suggested) combines both approaches \"\n                \"with a reranker.\"\n            ),\n            options=[\"Hybrid Search\", \"Vector Search\"],  # TODO: Restore Lexical Search?\n            options_metadata=[{\"icon\": \"SearchHybrid\"}, {\"icon\": \"SearchVector\"}],\n            value=\"Vector Search\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"reranker\",\n            display_name=\"Reranker\",\n            info=\"Post-retrieval model that re-scores results for optimal relevance ranking.\",\n            show=False,\n            toggle=True,\n        ),\n        QueryInput(\n            name=\"lexical_terms\",\n            display_name=\"Lexical Terms\",\n            info=\"Add additional terms/keywords to augment search precision.\",\n            placeholder=\"Enter terms to search...\",\n            separator=\" \",\n            show=False,\n            value=\"\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Search Results\",\n            info=\"Number of search results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"advanced_search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"autodetect_collection\",\n            display_name=\"Autodetect Collection\",\n            info=\"Boolean flag to determine whether to autodetect the collection.\",\n            advanced=True,\n            value=True,\n        ),\n        StrInput(\n            name=\"content_field\",\n            display_name=\"Content Field\",\n            info=\"Field to use as the text content field for the vector store.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"deletion_field\",\n            display_name=\"Deletion Based On Field\",\n            info=\"When this parameter is provided, documents in the target collection with \"\n            \"metadata field values matching the input metadata field value will be deleted \"\n            \"before new data is loaded.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"ignore_invalid_documents\",\n            display_name=\"Ignore Invalid Documents\",\n            info=\"Boolean flag to determine whether to ignore invalid documents at runtime.\",\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"astradb_vectorstore_kwargs\",\n            display_name=\"AstraDBVectorStore Parameters\",\n            info=\"Optional dictionary of additional parameters for the AstraDBVectorStore.\",\n            advanced=True,\n        ),\n    ]\n\n    @classmethod\n    def map_cloud_providers(cls):\n        # TODO: Programmatically fetch the regions for each cloud provider\n        return {\n            \"dev\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-west-2\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\", \"europe-west4\"],\n                },\n            },\n            \"test\": {\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\"],\n                },\n            },\n            \"prod\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-east-2\", \"ap-south-1\", \"eu-west-1\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-east1\"],\n                },\n                \"Microsoft Azure\": {\n                    \"id\": \"azure\",\n                    \"regions\": [\"westus3\"],\n                },\n            },\n        }\n\n    @classmethod\n    def get_vectorize_providers(cls, token: str, environment: str | None = None, api_endpoint: str | None = None):\n        try:\n            # Get the admin object\n            client = DataAPIClient(environment=environment)\n            admin_client = client.get_admin()\n            db_admin = admin_client.get_database_admin(api_endpoint, token=token)\n\n            # Get the list of embedding providers\n            embedding_providers = db_admin.find_embedding_providers()\n\n            vectorize_providers_mapping = {}\n            # Map the provider display name to the provider key and models\n            for provider_key, provider_data in embedding_providers.embedding_providers.items():\n                # Get the provider display name and models\n                display_name = provider_data.display_name\n                models = [model.name for model in provider_data.models]\n\n                # Build our mapping\n                vectorize_providers_mapping[display_name] = [provider_key, models]\n\n            # Sort the resulting dictionary\n            return defaultdict(list, dict(sorted(vectorize_providers_mapping.items())))\n        except Exception as _:  # noqa: BLE001\n            return {}\n\n    @classmethod\n    async def create_database_api(\n        cls,\n        new_database_name: str,\n        cloud_provider: str,\n        region: str,\n        token: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n    ):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the environment, set to prod if null like\n        my_env = environment or \"prod\"\n\n        # Raise a value error if name isn't provided\n        if not new_database_name:\n            msg = \"Database name is required to create a new database.\"\n            raise ValueError(msg)\n\n        # Call the create database function\n        return await admin_client.async_create_database(\n            name=new_database_name,\n            cloud_provider=cls.map_cloud_providers()[my_env][cloud_provider][\"id\"],\n            region=region,\n            keyspace=keyspace,\n            wait_until_active=False,\n        )\n\n    @classmethod\n    async def create_collection_api(\n        cls,\n        new_collection_name: str,\n        token: str,\n        api_endpoint: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n        dimension: int | None = None,\n        embedding_generation_provider: str | None = None,\n        embedding_generation_model: str | None = None,\n        reranker: str | None = None,\n    ):\n        # Build vectorize options, if needed\n        vectorize_options = None\n        if not dimension:\n            providers = cls.get_vectorize_providers(token=token, environment=environment, api_endpoint=api_endpoint)\n            vectorize_options = VectorServiceOptions(\n                provider=providers.get(embedding_generation_provider, [None, []])[0],\n                model_name=embedding_generation_model,\n            )\n\n        # Raise a value error if name isn't provided\n        if not new_collection_name:\n            msg = \"Collection name is required to create a new collection.\"\n            raise ValueError(msg)\n\n        # Define the base arguments being passed to the create collection function\n        base_args = {\n            \"collection_name\": new_collection_name,\n            \"token\": token,\n            \"api_endpoint\": api_endpoint,\n            \"keyspace\": keyspace,\n            \"environment\": environment,\n            \"embedding_dimension\": dimension,\n            \"collection_vector_service_options\": vectorize_options,\n        }\n\n        # Add optional arguments if the reranker is set\n        if reranker:\n            # Split the reranker field into a provider a model name\n            provider, _ = reranker.split(\"/\")\n            base_args[\"collection_rerank\"] = CollectionRerankOptions(\n                service=RerankServiceOptions(provider=provider, model_name=reranker),\n            )\n            base_args[\"collection_lexical\"] = CollectionLexicalOptions(analyzer=\"STANDARD\")\n\n        _AstraDBCollectionEnvironment(**base_args)\n\n    @classmethod\n    def get_database_list_static(cls, token: str, environment: str | None = None):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the list of databases\n        db_list = admin_client.list_databases()\n\n        # Generate the api endpoint for each database\n        db_info_dict = {}\n        for db in db_list:\n            try:\n                # Get the API endpoint for the database\n                api_endpoint = db.regions[0].api_endpoint\n\n                # Get the number of collections\n                try:\n                    # Get the number of collections in the database\n                    num_collections = len(\n                        client.get_database(\n                            api_endpoint,\n                            token=token,\n                        ).list_collection_names()\n                    )\n                except Exception:  # noqa: BLE001\n                    if db.status != \"PENDING\":\n                        continue\n                    num_collections = 0\n\n                # Add the database to the dictionary\n                db_info_dict[db.name] = {\n                    \"api_endpoint\": api_endpoint,\n                    \"keyspaces\": db.keyspaces,\n                    \"collections\": num_collections,\n                    \"status\": db.status if db.status != \"ACTIVE\" else None,\n                    \"org_id\": db.org_id if db.org_id else None,\n                }\n            except Exception:  # noqa: BLE001, S110\n                pass\n\n        return db_info_dict\n\n    def get_database_list(self):\n        return self.get_database_list_static(\n            token=self.token,\n            environment=self.environment,\n        )\n\n    @classmethod\n    def get_api_endpoint_static(\n        cls,\n        token: str,\n        environment: str | None = None,\n        api_endpoint: str | None = None,\n        database_name: str | None = None,\n    ):\n        # If the api_endpoint is set, return it\n        if api_endpoint:\n            return api_endpoint\n\n        # Check if the database_name is like a url\n        if database_name and database_name.startswith(\"https://\"):\n            return database_name\n\n        # If the database is not set, nothing we can do.\n        if not database_name:\n            return None\n\n        # Grab the database object\n        db = cls.get_database_list_static(token=token, environment=environment).get(database_name)\n        if not db:\n            return None\n\n        # Otherwise, get the URL from the database list\n        return db.get(\"api_endpoint\")\n\n    def get_api_endpoint(self):\n        return self.get_api_endpoint_static(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=self.api_endpoint,\n            database_name=self.database_name,\n        )\n\n    @classmethod\n    def get_database_id_static(cls, api_endpoint: str) -> str | None:\n        # Pattern matches standard UUID format: 8-4-4-4-12 hexadecimal characters\n        uuid_pattern = r\"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\"\n        match = re.search(uuid_pattern, api_endpoint)\n\n        return match.group(0) if match else None\n\n    def get_database_id(self):\n        return self.get_database_id_static(api_endpoint=self.get_api_endpoint())\n\n    def get_keyspace(self):\n        keyspace = self.keyspace\n\n        if keyspace:\n            return keyspace.strip()\n\n        return \"default_keyspace\"\n\n    def get_database_object(self, api_endpoint: str | None = None):\n        try:\n            client = DataAPIClient(environment=self.environment)\n\n            return client.get_database(\n                api_endpoint or self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n        except Exception as e:\n            msg = f\"Error fetching database object: {e}\"\n            raise ValueError(msg) from e\n\n    def collection_data(self, collection_name: str, database: Database | None = None):\n        try:\n            if not database:\n                client = DataAPIClient(environment=self.environment)\n\n                database = client.get_database(\n                    self.get_api_endpoint(),\n                    token=self.token,\n                    keyspace=self.get_keyspace(),\n                )\n\n            collection = database.get_collection(collection_name)\n\n            return collection.estimated_document_count()\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error checking collection data: {e}\")\n\n            return None\n\n    def _initialize_database_options(self):\n        try:\n            return [\n                {\n                    \"name\": name,\n                    \"status\": info[\"status\"],\n                    \"collections\": info[\"collections\"],\n                    \"api_endpoint\": info[\"api_endpoint\"],\n                    \"keyspaces\": info[\"keyspaces\"],\n                    \"org_id\": info[\"org_id\"],\n                }\n                for name, info in self.get_database_list().items()\n            ]\n        except Exception as e:\n            msg = f\"Error fetching database options: {e}\"\n            raise ValueError(msg) from e\n\n    @classmethod\n    def get_provider_icon(cls, collection: CollectionDescriptor | None = None, provider_name: str | None = None) -> str:\n        # Get the provider name from the collection\n        provider_name = provider_name or (\n            collection.definition.vector.service.provider\n            if (\n                collection\n                and collection.definition\n                and collection.definition.vector\n                and collection.definition.vector.service\n            )\n            else None\n        )\n\n        # If there is no provider, use the vector store icon\n        if not provider_name or provider_name.lower() == \"bring your own\":\n            return \"vectorstores\"\n\n        # Map provider casings\n        case_map = {\n            \"nvidia\": \"NVIDIA\",\n            \"openai\": \"OpenAI\",\n            \"amazon bedrock\": \"AmazonBedrockEmbeddings\",\n            \"azure openai\": \"AzureOpenAiEmbeddings\",\n            \"cohere\": \"Cohere\",\n            \"jina ai\": \"JinaAI\",\n            \"mistral ai\": \"MistralAI\",\n            \"upstage\": \"Upstage\",\n            \"voyage ai\": \"VoyageAI\",\n        }\n\n        # Adjust the casing on some like nvidia\n        return case_map[provider_name.lower()] if provider_name.lower() in case_map else provider_name.title()\n\n    def _initialize_collection_options(self, api_endpoint: str | None = None):\n        # Nothing to generate if we don't have an API endpoint yet\n        api_endpoint = api_endpoint or self.get_api_endpoint()\n        if not api_endpoint:\n            return []\n\n        # Retrieve the database object\n        database = self.get_database_object(api_endpoint=api_endpoint)\n\n        # Get the list of collections\n        collection_list = database.list_collections(keyspace=self.get_keyspace())\n\n        # Return the list of collections and metadata associated\n        return [\n            {\n                \"name\": col.name,\n                \"records\": self.collection_data(collection_name=col.name, database=database),\n                \"provider\": (\n                    col.definition.vector.service.provider\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n                \"icon\": self.get_provider_icon(collection=col),\n                \"model\": (\n                    col.definition.vector.service.model_name\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n            }\n            for col in collection_list\n        ]\n\n    def reset_provider_options(self, build_config: dict) -> dict:\n        \"\"\"Reset provider options and related configurations in the build_config dictionary.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get vectorize providers\n        vectorize_providers_api = self.get_vectorize_providers(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n        )\n\n        # Create a new dictionary with \"Bring your own\" first\n        vectorize_providers: dict[str, list[list[str]]] = {\"Bring your own\": [[], []]}\n\n        # Add the remaining items (only Nvidia) from the original dictionary\n        vectorize_providers.update(\n            {\n                k: v\n                for k, v in vectorize_providers_api.items()\n                if k.lower() in [\"nvidia\"]  # TODO: Eventually support more\n            }\n        )\n\n        # Set provider options\n        provider_field = \"02_embedding_generation_provider\"\n        template[provider_field][\"options\"] = list(vectorize_providers.keys())\n\n        # Add metadata for each provider option\n        template[provider_field][\"options_metadata\"] = [\n            {\"icon\": self.get_provider_icon(provider_name=provider)} for provider in template[provider_field][\"options\"]\n        ]\n\n        # Get selected embedding provider\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure embedding model field\n        model_field = \"03_embedding_generation_model\"\n        template[model_field].update(\n            {\n                \"options\": vectorize_providers.get(embedding_provider, [[], []])[1],\n                \"placeholder\": \"Bring your own\" if is_bring_your_own else None,\n                \"readonly\": is_bring_your_own,\n                \"required\": not is_bring_your_own,\n                \"value\": None,\n            }\n        )\n\n        # If this is a bring your own, set dimensions to 0\n        return self.reset_dimension_field(build_config)\n\n    def reset_dimension_field(self, build_config: dict) -> dict:\n        \"\"\"Reset dimension field options based on provided configuration.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get selected embedding model\n        provider_field = \"02_embedding_generation_provider\"\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure dimension field\n        dimension_field = \"04_dimension\"\n        dimension_value = 1024 if not is_bring_your_own else None  # TODO: Dynamically figure this out\n        template[dimension_field].update(\n            {\n                \"placeholder\": dimension_value,\n                \"value\": dimension_value,\n                \"readonly\": not is_bring_your_own,\n                \"required\": is_bring_your_own,\n            }\n        )\n\n        return build_config\n\n    def reset_collection_list(self, build_config: dict) -> dict:\n        \"\"\"Reset collection list options based on provided configuration.\"\"\"\n        # Get collection options\n        collection_options = self._initialize_collection_options(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        # Update collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update(\n            {\n                \"options\": [col[\"name\"] for col in collection_options],\n                \"options_metadata\": [{k: v for k, v in col.items() if k != \"name\"} for col in collection_options],\n            }\n        )\n\n        # Reset selected collection if not in options\n        if collection_config[\"value\"] not in collection_config[\"options\"]:\n            collection_config[\"value\"] = \"\"\n\n        # Set advanced status based on database selection\n        collection_config[\"show\"] = bool(build_config[\"database_name\"][\"value\"])\n\n        return build_config\n\n    def reset_database_list(self, build_config: dict) -> dict:\n        \"\"\"Reset database list options and related configurations.\"\"\"\n        # Get database options\n        database_options = self._initialize_database_options()\n\n        # Update cloud provider options\n        env = self.environment\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_cloud_provider\"][\"options\"] = list(self.map_cloud_providers()[env].keys())\n\n        # Update database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update(\n            {\n                \"options\": [db[\"name\"] for db in database_options],\n                \"options_metadata\": [{k: v for k, v in db.items() if k != \"name\"} for db in database_options],\n            }\n        )\n\n        # Reset selections if value not in options\n        if database_config[\"value\"] not in database_config[\"options\"]:\n            database_config[\"value\"] = \"\"\n            build_config[\"api_endpoint\"][\"value\"] = \"\"\n            build_config[\"collection_name\"][\"show\"] = False\n\n        # Set advanced status based on token presence\n        database_config[\"show\"] = bool(build_config[\"token\"][\"value\"])\n\n        return build_config\n\n    def reset_build_config(self, build_config: dict) -> dict:\n        \"\"\"Reset all build configuration options to default empty state.\"\"\"\n        # Reset database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n        build_config[\"api_endpoint\"][\"value\"] = \"\"\n\n        # Reset collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n\n        return build_config\n\n    def _handle_hybrid_search_options(self, build_config: dict) -> dict:\n        \"\"\"Set hybrid search options in the build configuration.\"\"\"\n        # Detect what hybrid options are available\n        # Get the admin object\n        client = DataAPIClient(environment=self.environment)\n        admin_client = client.get_admin()\n        db_admin = admin_client.get_database_admin(self.get_api_endpoint(), token=self.token)\n\n        # We will try to get the reranking providers to see if its hybrid emabled\n        try:\n            providers = db_admin.find_reranking_providers()\n            build_config[\"reranker\"][\"options\"] = [\n                model.name for provider_data in providers.reranking_providers.values() for model in provider_data.models\n            ]\n            build_config[\"reranker\"][\"options_metadata\"] = [\n                {\"icon\": self.get_provider_icon(provider_name=model.name.split(\"/\")[0])}\n                for provider in providers.reranking_providers.values()\n                for model in provider.models\n            ]\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Set the default search field to hybrid search\n            build_config[\"search_method\"][\"show\"] = True\n            build_config[\"search_method\"][\"options\"] = [\"Hybrid Search\", \"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Hybrid Search\"\n        except Exception as _:  # noqa: BLE001\n            build_config[\"reranker\"][\"options\"] = []\n            build_config[\"reranker\"][\"options_metadata\"] = []\n\n            # Set the default search field to vector search\n            build_config[\"search_method\"][\"show\"] = False\n            build_config[\"search_method\"][\"options\"] = [\"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Vector Search\"\n\n        # Set reranker and lexical terms options based on search method\n        build_config[\"reranker\"][\"toggle_value\"] = True\n        build_config[\"reranker\"][\"show\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        build_config[\"reranker\"][\"toggle_disable\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        if build_config[\"reranker\"][\"show\"]:\n            build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update build configuration based on field name and value.\"\"\"\n        # Early return if no token provided\n        if not self.token:\n            return self.reset_build_config(build_config)\n\n        # Database creation callback\n        if field_name == \"database_name\" and isinstance(field_value, dict):\n            if \"01_new_database_name\" in field_value:\n                await self._create_new_database(build_config, field_value)\n                return self.reset_collection_list(build_config)\n            return self._update_cloud_regions(build_config, field_value)\n\n        # Collection creation callback\n        if field_name == \"collection_name\" and isinstance(field_value, dict):\n            # Case 1: New collection creation\n            if \"01_new_collection_name\" in field_value:\n                await self._create_new_collection(build_config, field_value)\n                return build_config\n\n            # Case 2: Update embedding provider options\n            if \"02_embedding_generation_provider\" in field_value:\n                return self.reset_provider_options(build_config)\n\n            # Case 3: Update dimension field\n            if \"03_embedding_generation_model\" in field_value:\n                return self.reset_dimension_field(build_config)\n\n        # Initial execution or token/environment change\n        first_run = field_name == \"collection_name\" and not field_value and not build_config[\"database_name\"][\"options\"]\n        if first_run or field_name in {\"token\", \"environment\"}:\n            return self.reset_database_list(build_config)\n\n        # Database selection change\n        if field_name == \"database_name\" and not isinstance(field_value, dict):\n            return self._handle_database_selection(build_config, field_value)\n\n        # Keyspace selection change\n        if field_name == \"keyspace\":\n            return self.reset_collection_list(build_config)\n\n        # Collection selection change\n        if field_name == \"collection_name\" and not isinstance(field_value, dict):\n            return self._handle_collection_selection(build_config, field_value)\n\n        # Search method selection change\n        if field_name == \"search_method\":\n            is_vector_search = field_value == \"Vector Search\"\n            is_autodetect = build_config[\"autodetect_collection\"][\"value\"]\n\n            # Configure lexical terms (same for both cases)\n            build_config[\"lexical_terms\"][\"show\"] = not is_vector_search\n            build_config[\"lexical_terms\"][\"value\"] = \"\" if is_vector_search else build_config[\"lexical_terms\"][\"value\"]\n\n            # Disable reranker disabling if hybrid search is selected\n            build_config[\"reranker\"][\"toggle_disable\"] = not is_vector_search\n            build_config[\"reranker\"][\"toggle_value\"] = True\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Toggle search type and score threshold based on search method\n            build_config[\"search_type\"][\"show\"] = is_vector_search\n            build_config[\"search_score_threshold\"][\"show\"] = is_vector_search\n\n            # Make sure the search_type is set to \"Similarity\"\n            if not is_vector_search or is_autodetect:\n                build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def _create_new_database(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new database and update build config options.\"\"\"\n        try:\n            await self.create_database_api(\n                new_database_name=field_value[\"01_new_database_name\"],\n                token=self.token,\n                keyspace=self.get_keyspace(),\n                environment=self.environment,\n                cloud_provider=field_value[\"02_cloud_provider\"],\n                region=field_value[\"03_region\"],\n            )\n        except Exception as e:\n            msg = f\"Error creating database: {e}\"\n            raise ValueError(msg) from e\n\n        build_config[\"database_name\"][\"options\"].append(field_value[\"01_new_database_name\"])\n        build_config[\"database_name\"][\"options_metadata\"].append(\n            {\n                \"status\": \"PENDING\",\n                \"collections\": 0,\n                \"api_endpoint\": None,\n                \"keyspaces\": [self.get_keyspace()],\n                \"org_id\": None,\n            }\n        )\n\n    def _update_cloud_regions(self, build_config: dict, field_value: dict) -> dict:\n        \"\"\"Update cloud provider regions in build config.\"\"\"\n        env = self.environment\n        cloud_provider = field_value[\"02_cloud_provider\"]\n\n        # Update the region options based on the selected cloud provider\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"03_region\"][\"options\"] = self.map_cloud_providers()[env][cloud_provider][\"regions\"]\n\n        # Reset the the 03_region value if it's not in the new options\n        if template[\"03_region\"][\"value\"] not in template[\"03_region\"][\"options\"]:\n            template[\"03_region\"][\"value\"] = None\n\n        return build_config\n\n    async def _create_new_collection(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new collection and update build config options.\"\"\"\n        embedding_provider = field_value.get(\"02_embedding_generation_provider\")\n        try:\n            await self.create_collection_api(\n                new_collection_name=field_value[\"01_new_collection_name\"],\n                token=self.token,\n                api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n                environment=self.environment,\n                keyspace=self.get_keyspace(),\n                dimension=field_value.get(\"04_dimension\") if embedding_provider == \"Bring your own\" else None,\n                embedding_generation_provider=embedding_provider,\n                embedding_generation_model=field_value.get(\"03_embedding_generation_model\"),\n                reranker=self.reranker,\n            )\n        except Exception as e:\n            msg = f\"Error creating collection: {e}\"\n            raise ValueError(msg) from e\n\n        provider = embedding_provider.lower() if embedding_provider and embedding_provider != \"Bring your own\" else None\n        build_config[\"collection_name\"].update(\n            {\n                \"value\": field_value[\"01_new_collection_name\"],\n                \"options\": build_config[\"collection_name\"][\"options\"] + [field_value[\"01_new_collection_name\"]],\n            }\n        )\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n        build_config[\"collection_name\"][\"options_metadata\"].append(\n            {\n                \"records\": 0,\n                \"provider\": provider,\n                \"icon\": self.get_provider_icon(provider_name=provider),\n                \"model\": field_value.get(\"03_embedding_generation_model\"),\n            }\n        )\n\n        # Make sure we always show the reranker options if the collection is hybrid enabled\n        # And right now they always are\n        build_config[\"lexical_terms\"][\"show\"] = True\n\n    def _handle_database_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle database selection and update related configurations.\"\"\"\n        build_config = self.reset_database_list(build_config)\n\n        # Reset collection list if database selection changes\n        if field_value not in build_config[\"database_name\"][\"options\"]:\n            build_config[\"database_name\"][\"value\"] = \"\"\n            return build_config\n\n        # Get the api endpoint for the selected database\n        index = build_config[\"database_name\"][\"options\"].index(field_value)\n        build_config[\"api_endpoint\"][\"value\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"api_endpoint\"]\n\n        # Get the org_id for the selected database\n        org_id = build_config[\"database_name\"][\"options_metadata\"][index][\"org_id\"]\n        if not org_id:\n            return build_config\n\n        # Update the list of keyspaces based on the db info\n        build_config[\"keyspace\"][\"options\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"keyspaces\"]\n        build_config[\"keyspace\"][\"value\"] = (\n            build_config[\"keyspace\"][\"options\"] and build_config[\"keyspace\"][\"options\"][0]\n            if build_config[\"keyspace\"][\"value\"] not in build_config[\"keyspace\"][\"options\"]\n            else build_config[\"keyspace\"][\"value\"]\n        )\n\n        # Get the database id for the selected database\n        db_id = self.get_database_id_static(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        keyspace = self.get_keyspace()\n\n        # Update the helper text for the embedding provider field\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_embedding_generation_provider\"][\"helper_text\"] = (\n            \"To create collections with more embedding provider options, go to \"\n            f'<a class=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\" '\n            f'href=\"https://astra.datastax.com/org/{org_id}/database/{db_id}/data-explorer?createCollection=1&namespace={keyspace}\">'\n            \"your database in Astra DB</a>.\"\n        )\n\n        # Reset provider options\n        build_config = self.reset_provider_options(build_config)\n\n        # Handle hybrid search options\n        build_config = self._handle_hybrid_search_options(build_config)\n\n        return self.reset_collection_list(build_config)\n\n    def _handle_collection_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle collection selection and update embedding options.\"\"\"\n        build_config[\"autodetect_collection\"][\"value\"] = True\n        build_config = self.reset_collection_list(build_config)\n\n        # Reset embedding model if collection selection changes\n        if field_value and field_value not in build_config[\"collection_name\"][\"options\"]:\n            build_config[\"collection_name\"][\"options\"].append(field_value)\n            build_config[\"collection_name\"][\"options_metadata\"].append(\n                {\n                    \"records\": 0,\n                    \"provider\": None,\n                    \"icon\": \"vectorstores\",\n                    \"model\": None,\n                }\n            )\n            build_config[\"autodetect_collection\"][\"value\"] = False\n\n        if not field_value:\n            return build_config\n\n        # Get the selected collection index\n        index = build_config[\"collection_name\"][\"options\"].index(field_value)\n\n        # Set the provider of the selected collection\n        provider = build_config[\"collection_name\"][\"options_metadata\"][index][\"provider\"]\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n\n        # Grab the collection object\n        database = self.get_database_object(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        collection = database.get_collection(\n            name=field_value,\n            keyspace=build_config[\"keyspace\"][\"value\"],\n        )\n\n        # Check if hybrid and lexical are enabled\n        col_options = collection.options()\n        hyb_enabled = col_options.rerank and col_options.rerank.enabled\n        lex_enabled = col_options.lexical and col_options.lexical.enabled\n        user_hyb_enabled = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n\n        # Show lexical terms if the collection is hybrid enabled\n        build_config[\"lexical_terms\"][\"show\"] = hyb_enabled and lex_enabled and user_hyb_enabled\n\n        return build_config\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        # Get the embedding model and additional params\n        embedding_params = {\"embedding\": self.embedding_model} if self.embedding_model else {}\n\n        # Get the additional parameters\n        additional_params = self.astradb_vectorstore_kwargs or {}\n\n        # Get Axie Studio version and platform information\n        __version__ = get_version_info()[\"version\"]\n        axiestudio_prefix = \"\"\n        # if os.getenv(\"AWS_EXECUTION_ENV\") == \"AWS_ECS_FARGATE\":  # TODO: More precise way of detecting\n        #     axiestudio_prefix = \"ds-\"\n\n        # Get the database object\n        database = self.get_database_object()\n        autodetect = self.collection_name in database.list_collection_names() and self.autodetect_collection\n\n        # Bundle up the auto-detect parameters\n        autodetect_params = {\n            \"autodetect_collection\": autodetect,\n            \"content_field\": (\n                self.content_field\n                if self.content_field and embedding_params\n                else (\n                    \"page_content\"\n                    if embedding_params\n                    and self.collection_data(collection_name=self.collection_name, database=database) == 0\n                    else None\n                )\n            ),\n            \"ignore_invalid_documents\": self.ignore_invalid_documents,\n        }\n\n        # Choose HybridSearchMode based on the selected param\n        hybrid_search_mode = HybridSearchMode.DEFAULT if self.search_method == \"Hybrid Search\" else HybridSearchMode.OFF\n\n        # Attempt to build the Vector Store object\n        try:\n            vector_store = AstraDBVectorStore(\n                # Astra DB Authentication Parameters\n                token=self.token,\n                api_endpoint=database.api_endpoint,\n                namespace=database.keyspace,\n                collection_name=self.collection_name,\n                environment=self.environment,\n                # Hybrid Search Parameters\n                hybrid_search=hybrid_search_mode,\n                # Astra DB Usage Tracking Parameters\n                ext_callers=[(f\"{axiestudio_prefix}axiestudio\", __version__)],\n                # Astra DB Vector Store Parameters\n                **autodetect_params,\n                **embedding_params,\n                **additional_params,\n            )\n        except Exception as e:\n            msg = f\"Fel vid initialisering av AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        # Add documents to the vector store\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        documents = [\n            Document(page_content=doc.page_content, metadata=serialize(doc.metadata, to_str=True)) for doc in documents\n        ]\n\n        if documents and self.deletion_field:\n            self.log(f\"Deleting documents where {self.deletion_field}\")\n            try:\n                database = self.get_database_object()\n                collection = database.get_collection(self.collection_name, keyspace=database.keyspace)\n                delete_values = list({doc.metadata[self.deletion_field] for doc in documents})\n                self.log(f\"Deleting documents where {self.deletion_field} matches {delete_values}.\")\n                collection.delete_many({f\"metadata.{self.deletion_field}\": {\"$in\": delete_values}})\n            except Exception as e:\n                msg = f\"Error deleting documents from AstraDBVectorStore based on '{self.deletion_field}': {e}\"\n                raise ValueError(msg) from e\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        search_type_mapping = {\n            \"Similarity with score threshold\": \"similarity_score_threshold\",\n            \"MMR (Max Marginal Relevance)\": \"mmr\",\n        }\n\n        return search_type_mapping.get(self.search_type, \"similarity\")\n\n    def _build_search_args(self):\n        # Clean up the search query\n        query = self.search_query if isinstance(self.search_query, str) and self.search_query.strip() else None\n        lexical_terms = self.lexical_terms or None\n\n        # Check if we have a search query, and if so set the args\n        if query:\n            args = {\n                \"query\": query,\n                \"search_type\": self._map_search_type(),\n                \"k\": self.number_of_results,\n                \"score_threshold\": self.search_score_threshold,\n                \"lexical_query\": lexical_terms,\n            }\n        elif self.advanced_search_filter:\n            args = {\n                \"n\": self.number_of_results,\n            }\n        else:\n            return {}\n\n        filter_arg = self.advanced_search_filter or {}\n        if filter_arg:\n            args[\"filter\"] = filter_arg\n\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        vector_store = vector_store or self.build_vector_store()\n\n        self.log(f\"Search input: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n        self.log(f\"store.hybrid_search: {vector_store.hybrid_search}\")\n        self.log(f\"Lexical terms: {self.lexical_terms}\")\n        self.log(f\"Reranker: {self.reranker}\")\n\n        try:\n            search_args = self._build_search_args()\n        except Exception as e:\n            msg = f\"Error in AstraDBVectorStore._build_search_args: {e}\"\n            raise ValueError(msg) from e\n\n        if not search_args:\n            self.log(\"No search input or filters provided. Skipping search.\")\n            return []\n\n        docs = []\n        search_method = \"search\" if \"query\" in search_args else \"metadata_search\"\n\n        try:\n            self.log(f\"Calling vector_store.{search_method} with args: {search_args}\")\n            docs = getattr(vector_store, search_method)(**search_args)\n        except Exception as e:\n            msg = f\"Error performing {search_method} in AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Retrieved documents: {len(docs)}\")\n\n        data = docs_to_data(docs)\n        self.log(f\"Converted documents to data: {len(data)}\")\n        self.status = data\n\n        return data\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"
              },
              "collection_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Please allow several seconds for creation to complete.",
                        "display_name": "Create new collection",
                        "field_order": [
                          "01_new_collection_name",
                          "02_embedding_generation_provider",
                          "03_embedding_generation_model",
                          "04_dimension"
                        ],
                        "name": "create_collection",
                        "template": {
                          "01_new_collection_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new collection to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_collection_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_embedding_generation_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding generation method",
                            "dynamic": false,
                            "helper_text": "To create collections with more embedding provider options, go to <a class=\"underline\" href=\"https://astra.datastax.com/\" target=\" _blank\" rel=\"noopener noreferrer\">your database in Astra DB</a>",
                            "info": "Provider to use for generating embeddings.",
                            "name": "embedding_generation_provider",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_embedding_generation_model": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding model",
                            "dynamic": false,
                            "info": "Model to use for generating embeddings.",
                            "name": "embedding_generation_model",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "04_dimension": {
                            "_input_type": "IntInput",
                            "advanced": false,
                            "display_name": "Dimensions",
                            "dynamic": false,
                            "info": "Dimensions of the embeddings to generate.",
                            "list": false,
                            "list_add_label": "Add More",
                            "name": "dimension",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "int"
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Collection",
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "load_from_db": false,
                "name": "collection_name",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "asdasd"
              },
              "content_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Content Field",
                "dynamic": false,
                "info": "Field to use as the text content field for the vector store.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "content_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "database_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Vänligen tillåt flera minuter för att skapandet ska slutföras.",
                        "display_name": "Skapa ny databas",
                        "field_order": [
                          "01_new_database_name",
                          "02_cloud_provider",
                          "03_region"
                        ],
                        "name": "create_database",
                        "template": {
                          "01_new_database_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new database to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_database_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_cloud_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Cloud provider",
                            "dynamic": false,
                            "info": "Cloud provider for the new database.",
                            "name": "cloud_provider",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_region": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Region",
                            "dynamic": false,
                            "info": "Region for the new database.",
                            "name": "region",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Database",
                "dynamic": false,
                "info": "The Database name for the Astra DB instance.",
                "load_from_db": false,
                "name": "database_name",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "axie"
              },
              "deletion_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Deletion Based On Field",
                "dynamic": false,
                "info": "When this parameter is provided, documents in the target collection with metadata field values matching the input metadata field value will be deleted before new data is loaded.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "deletion_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "embedding_model": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding Model",
                "dynamic": false,
                "info": "Specify the Embedding Model. Not required for Astra Vectorize collections.",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_model",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "environment": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Environment",
                "dynamic": false,
                "info": "The environment for the Astra DB API Endpoint.",
                "name": "environment",
                "options": [
                  "prod",
                  "test",
                  "dev"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "prod"
              },
              "ignore_invalid_documents": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Invalid Documents",
                "dynamic": false,
                "info": "Boolean flag to determine whether to ignore invalid documents at runtime.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_invalid_documents",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Mata in data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "keyspace": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Keyspace",
                "dynamic": false,
                "info": "Optional keyspace within Astra DB to use for the collection.",
                "load_from_db": false,
                "name": "keyspace",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default_keyspace"
              },
              "lexical_terms": {
                "_input_type": "QueryInput",
                "advanced": true,
                "display_name": "Lexical Terms",
                "dynamic": false,
                "info": "Add additional terms/keywords to augment search precision.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "lexical_terms",
                "placeholder": "Enter terms to search...",
                "required": false,
                "separator": " ",
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Search Results",
                "dynamic": false,
                "info": "Number of search results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4
              },
              "reranker": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Reranker",
                "dynamic": false,
                "info": "Post-retrieval model that re-scores results for optimal relevance ranking.",
                "load_from_db": false,
                "name": "reranker",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "toggle": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "nvidia/llama-3.2-nv-rerankqa-1b-v2"
              },
              "search_method": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Method",
                "dynamic": false,
                "info": "Determine how your content is matched: Vector finds semantic similarity, and Hybrid Search (suggested) combines both approaches with a reranker.",
                "load_from_db": false,
                "name": "search_method",
                "options": [
                  "Hybrid Search",
                  "Vector Search"
                ],
                "options_metadata": [
                  {
                    "icon": "SearchHybrid"
                  },
                  {
                    "icon": "SearchVector"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Hybrid Search"
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Sökfråga",
                "dynamic": false,
                "info": "Ange en fråga för att köra en likhetsökning.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Ange en fråga...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "search_score_threshold": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Search Score Threshold",
                "dynamic": false,
                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                "list": false,
                "list_add_label": "Add More",
                "name": "search_score_threshold",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": 0
              },
              "search_type": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Type",
                "dynamic": false,
                "info": "Search type to use",
                "name": "search_type",
                "options": [
                  "Similarity",
                  "Similarity with score threshold",
                  "MMR (Max Marginal Relevance)"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Similarity"
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cacha vektorlager",
                "dynamic": false,
                "info": "Om True kommer vektorlagret att cachas för den aktuella byggnationen av komponenten. Detta är användbart för komponenter som har flera utdatametoder och vill dela samma vektorlager.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "token": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [],
                "load_from_db": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "${ASTRA_DB_TOKEN}"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Åtgärder",
                "dynamic": false,
                "info": "Ändra verktygsnamn och beskrivningar för att hjälpa agenter förstå när de ska använda varje verktyg.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "search_query": {
                        "default": "",
                        "description": "Ange en fråga för att köra en likhetsökning.",
                        "title": "Search Query",
                        "type": "string"
                      }
                    },
                    "description": "Mata in och sök dokument i Astra DB",
                    "display_description": "Mata in och sök dokument i Astra DB",
                    "display_name": "search_documents",
                    "name": "search_documents",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "search_documents"
                    ]
                  },
                  {
                    "args": {
                      "search_query": {
                        "default": "",
                        "description": "Ange en fråga för att köra en likhetsökning.",
                        "title": "Search Query",
                        "type": "string"
                      }
                    },
                    "description": "Mata in och sök dokument i Astra DB",
                    "display_description": "Mata in och sök dokument i Astra DB",
                    "display_name": "as_dataframe",
                    "name": "as_dataframe",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "as_dataframe"
                    ]
                  },
                  {
                    "args": {
                      "search_query": {
                        "default": "",
                        "description": "Ange en fråga för att köra en likhetsökning.",
                        "title": "Search Query",
                        "type": "string"
                      }
                    },
                    "description": "Mata in och sök dokument i Astra DB",
                    "display_description": "Mata in och sök dokument i Astra DB",
                    "display_name": "as_vector_store",
                    "name": "as_vector_store",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "as_vector_store"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "selected_output": "search_results",
          "showNode": true,
          "type": "AstraDB"
        },
        "dragging": false,
        "id": "AstraDB-c9ooW",
        "measured": {
          "height": 437,
          "width": 320
        },
        "position": {
          "x": 2087.7503861985924,
          "y": 905.5578318856561
        },
        "selected": true,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CurrentDate-wG7Hr",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Returnerar aktuellt datum och tid i den valda tidszonen.",
            "display_name": "Aktuellt datum",
            "documentation": "https://docs.axiestudio.org/components-helpers#current-date",
            "edited": false,
            "field_order": [
              "timezone"
            ],
            "frozen": false,
            "icon": "clock",
            "last_updated": "2025-10-01T17:07:36.033Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Verktygsuppsättning",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime\nfrom zoneinfo import ZoneInfo, available_timezones\n\nfrom axiestudio.logging import logger\n\nfrom axiestudio.custom.custom_component.component import Component\nfrom axiestudio.io import DropdownInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass CurrentDateComponent(Component):\n    display_name = \"Aktuellt datum\"\n    description = \"Returnerar aktuellt datum och tid i den valda tidszonen.\"\n    documentation: str = \"https://docs.axiestudio.org/components-helpers#current-date\"\n    icon = \"clock\"\n    name = \"CurrentDate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"timezone\",\n            display_name=\"Tidszon\",\n            options=list(available_timezones()),\n            value=\"UTC\",\n            info=\"Välj tidszonen för aktuellt datum och tid.\",\n            tool_mode=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Aktuellt datum\", name=\"current_date\", method=\"get_current_date\"),\n    ]\n\n    def get_current_date(self) -> Message:\n        try:\n            tz = ZoneInfo(self.timezone)\n            current_date = datetime.now(tz).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            result = f\"Current date and time in {self.timezone}: {current_date}\"\n            self.status = result\n            return Message(text=result)\n        except Exception as e:  # noqa: BLE001\n            logger.opt(exception=True).debug(\"Error getting current date\")\n            error_message = f\"Error: {e}\"\n            self.status = error_message\n            return Message(text=error_message)\n"
              },
              "timezone": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tidszon",
                "dynamic": false,
                "info": "Välj tidszonen för aktuellt datum och tid.",
                "load_from_db": false,
                "name": "timezone",
                "options": [
                  "Asia/Irkutsk",
                  "Africa/Bamako",
                  "Africa/Kigali",
                  "Asia/Rangoon",
                  "America/Port-au-Prince",
                  "Africa/El_Aaiun",
                  "Asia/Tomsk",
                  "Asia/Ulaanbaatar",
                  "America/St_Kitts",
                  "CET",
                  "Europe/Zaporozhye",
                  "Asia/Amman",
                  "America/Atikokan",
                  "Europe/Kaliningrad",
                  "Africa/Lusaka",
                  "Pacific/Midway",
                  "America/Belize",
                  "America/Marigot",
                  "Africa/Kampala",
                  "Africa/Dakar",
                  "Australia/Eucla",
                  "Asia/Aqtau",
                  "America/Creston",
                  "America/Thunder_Bay",
                  "America/Atka",
                  "Asia/Shanghai",
                  "Etc/GMT+12",
                  "Africa/Douala",
                  "Indian/Mauritius",
                  "America/Yellowknife",
                  "Africa/Mogadishu",
                  "America/Glace_Bay",
                  "Etc/GMT-10",
                  "Universal",
                  "Africa/Lubumbashi",
                  "Atlantic/Azores",
                  "Asia/Manila",
                  "Europe/Mariehamn",
                  "Pacific/Chuuk",
                  "America/Grand_Turk",
                  "America/Araguaina",
                  "America/Nuuk",
                  "Asia/Dubai",
                  "Pacific/Chatham",
                  "Kwajalein",
                  "GMT",
                  "US/Eastern",
                  "Etc/GMT-13",
                  "America/Argentina/San_Juan",
                  "Antarctica/Mawson",
                  "America/Anguilla",
                  "Africa/Bangui",
                  "America/Boise",
                  "Pacific/Yap",
                  "Asia/Qostanay",
                  "America/Thule",
                  "America/Guayaquil",
                  "Portugal",
                  "America/Rosario",
                  "Brazil/Acre",
                  "Etc/GMT-6",
                  "Etc/GMT-3",
                  "America/Sao_Paulo",
                  "Australia/Lindeman",
                  "America/North_Dakota/Center",
                  "Pacific/Kiritimati",
                  "Etc/UTC",
                  "America/Paramaribo",
                  "America/Guadeloupe",
                  "Asia/Urumqi",
                  "Pacific/Auckland",
                  "Pacific/Guam",
                  "Asia/Hovd",
                  "Pacific/Samoa",
                  "Africa/Niamey",
                  "Europe/Kiev",
                  "America/Matamoros",
                  "EET",
                  "US/Michigan",
                  "America/Godthab",
                  "Etc/GMT-7",
                  "Asia/Krasnoyarsk",
                  "Europe/Vatican",
                  "America/Havana",
                  "America/Port_of_Spain",
                  "Africa/Malabo",
                  "Antarctica/Casey",
                  "America/Dominica",
                  "Pacific/Truk",
                  "Asia/Brunei",
                  "America/Whitehorse",
                  "Asia/Baku",
                  "America/Rankin_Inlet",
                  "Asia/Khandyga",
                  "Europe/Oslo",
                  "America/Cordoba",
                  "America/Curacao",
                  "Asia/Hebron",
                  "Europe/Ulyanovsk",
                  "Asia/Tokyo",
                  "Eire",
                  "America/Bahia_Banderas",
                  "Europe/Warsaw",
                  "GMT+0",
                  "Pacific/Galapagos",
                  "Etc/GMT-0",
                  "Europe/Samara",
                  "GB-Eire",
                  "Europe/Lisbon",
                  "Pacific/Noumea",
                  "Europe/Saratov",
                  "Europe/Rome",
                  "Asia/Kabul",
                  "America/Coyhaique",
                  "Africa/Bissau",
                  "Asia/Novokuznetsk",
                  "Asia/Barnaul",
                  "America/Cayenne",
                  "Arctic/Longyearbyen",
                  "Asia/Bahrain",
                  "NZ-CHAT",
                  "Europe/Belfast",
                  "Europe/Stockholm",
                  "America/Santo_Domingo",
                  "Australia/Victoria",
                  "Cuba",
                  "America/Goose_Bay",
                  "Europe/Nicosia",
                  "Australia/Canberra",
                  "Asia/Macao",
                  "Asia/Samarkand",
                  "America/Argentina/La_Rioja",
                  "Asia/Kashgar",
                  "Asia/Jerusalem",
                  "America/Argentina/Salta",
                  "America/Lima",
                  "Atlantic/Madeira",
                  "Africa/Brazzaville",
                  "Australia/Yancowinna",
                  "Asia/Taipei",
                  "Canada/Yukon",
                  "Etc/GMT+7",
                  "America/Maceio",
                  "Europe/Riga",
                  "America/Swift_Current",
                  "Antarctica/South_Pole",
                  "Europe/Budapest",
                  "America/Argentina/ComodRivadavia",
                  "Brazil/DeNoronha",
                  "EST5EDT",
                  "America/Rio_Branco",
                  "Atlantic/South_Georgia",
                  "America/Manaus",
                  "Australia/ACT",
                  "Etc/GMT+9",
                  "America/Adak",
                  "GMT0",
                  "America/Recife",
                  "Brazil/East",
                  "Pacific/Ponape",
                  "Asia/Tehran",
                  "America/Eirunepe",
                  "Europe/Copenhagen",
                  "US/Pacific",
                  "Europe/Brussels",
                  "Indian/Mayotte",
                  "Australia/Adelaide",
                  "Antarctica/DumontDUrville",
                  "Europe/Vaduz",
                  "Asia/Tel_Aviv",
                  "Asia/Riyadh",
                  "Etc/GMT-5",
                  "Africa/Freetown",
                  "Asia/Famagusta",
                  "Europe/Simferopol",
                  "Poland",
                  "Brazil/West",
                  "Pacific/Honolulu",
                  "America/Shiprock",
                  "Egypt",
                  "America/El_Salvador",
                  "America/Resolute",
                  "Europe/Andorra",
                  "Pacific/Fakaofo",
                  "Asia/Bishkek",
                  "America/Argentina/Buenos_Aires",
                  "PST8PDT",
                  "America/Kentucky/Monticello",
                  "US/Samoa",
                  "America/Panama",
                  "America/Cancun",
                  "America/Los_Angeles",
                  "Europe/Kirov",
                  "UTC",
                  "Hongkong",
                  "Asia/Baghdad",
                  "US/East-Indiana",
                  "Africa/Kinshasa",
                  "America/Managua",
                  "Asia/Yekaterinburg",
                  "America/Montserrat",
                  "America/Argentina/Rio_Gallegos",
                  "Africa/Lagos",
                  "America/Argentina/Jujuy",
                  "Europe/Minsk",
                  "Asia/Ujung_Pandang",
                  "America/Catamarca",
                  "Africa/Ceuta",
                  "America/Belem",
                  "Chile/EasterIsland",
                  "Africa/Luanda",
                  "Europe/Prague",
                  "Asia/Yakutsk",
                  "Asia/Saigon",
                  "America/Montreal",
                  "Iran",
                  "Europe/Luxembourg",
                  "Indian/Comoro",
                  "Asia/Dushanbe",
                  "Asia/Calcutta",
                  "America/Santiago",
                  "America/Kentucky/Louisville",
                  "America/Anchorage",
                  "Asia/Yangon",
                  "Mexico/General",
                  "Etc/GMT+6",
                  "America/Knox_IN",
                  "America/Juneau",
                  "America/Puerto_Rico",
                  "US/Hawaii",
                  "America/Indiana/Winamac",
                  "Australia/Sydney",
                  "America/Santarem",
                  "America/Campo_Grande",
                  "Asia/Sakhalin",
                  "Australia/Hobart",
                  "Etc/GMT-14",
                  "Jamaica",
                  "NZ",
                  "Asia/Jayapura",
                  "Africa/Abidjan",
                  "Asia/Ulan_Bator",
                  "America/St_Barthelemy",
                  "Atlantic/St_Helena",
                  "Mexico/BajaSur",
                  "Europe/Vilnius",
                  "Pacific/Wallis",
                  "Asia/Ho_Chi_Minh",
                  "Asia/Thimphu",
                  "America/Tortola",
                  "Asia/Omsk",
                  "Asia/Pontianak",
                  "Asia/Nicosia",
                  "Canada/Newfoundland",
                  "Africa/Lome",
                  "Pacific/Pitcairn",
                  "America/Louisville",
                  "Europe/Madrid",
                  "Europe/San_Marino",
                  "Europe/Sarajevo",
                  "Africa/Asmera",
                  "America/Dawson_Creek",
                  "America/Kralendijk",
                  "America/Vancouver",
                  "America/Argentina/Catamarca",
                  "Etc/Greenwich",
                  "Atlantic/Canary",
                  "Indian/Maldives",
                  "Australia/Lord_Howe",
                  "Indian/Christmas",
                  "Etc/GMT-9",
                  "Etc/GMT",
                  "Europe/Skopje",
                  "America/Ojinaga",
                  "Pacific/Saipan",
                  "America/Cuiaba",
                  "Africa/Addis_Ababa",
                  "Pacific/Tarawa",
                  "Canada/Eastern",
                  "Asia/Bangkok",
                  "Europe/Isle_of_Man",
                  "Africa/Johannesburg",
                  "Europe/Zagreb",
                  "Asia/Chungking",
                  "Pacific/Kosrae",
                  "Asia/Oral",
                  "Asia/Istanbul",
                  "Atlantic/Jan_Mayen",
                  "Asia/Aqtobe",
                  "Etc/Universal",
                  "Australia/Broken_Hill",
                  "America/Argentina/Tucuman",
                  "Asia/Aden",
                  "Indian/Reunion",
                  "Etc/GMT-8",
                  "Europe/Dublin",
                  "America/Indiana/Marengo",
                  "Europe/Astrakhan",
                  "Pacific/Majuro",
                  "Pacific/Norfolk",
                  "America/Coral_Harbour",
                  "America/Noronha",
                  "Pacific/Enderbury",
                  "Pacific/Fiji",
                  "Pacific/Pohnpei",
                  "America/Chihuahua",
                  "America/Costa_Rica",
                  "Africa/Timbuktu",
                  "Pacific/Rarotonga",
                  "Africa/Windhoek",
                  "America/Inuvik",
                  "Africa/Ouagadougou",
                  "Indian/Kerguelen",
                  "Europe/Istanbul",
                  "Canada/Central",
                  "Pacific/Easter",
                  "Europe/Ljubljana",
                  "Indian/Cocos",
                  "Africa/Libreville",
                  "Asia/Ashgabat",
                  "US/Aleutian",
                  "ROC",
                  "America/Edmonton",
                  "Asia/Makassar",
                  "Singapore",
                  "Etc/GMT-12",
                  "America/Iqaluit",
                  "Antarctica/Vostok",
                  "America/Montevideo",
                  "Africa/Dar_es_Salaam",
                  "America/Rainy_River",
                  "America/Fortaleza",
                  "Pacific/Pago_Pago",
                  "Australia/Brisbane",
                  "Iceland",
                  "America/Bahia",
                  "Asia/Dhaka",
                  "Europe/Jersey",
                  "Antarctica/Palmer",
                  "Africa/Asmara",
                  "America/Nipigon",
                  "US/Alaska",
                  "Etc/GMT+10",
                  "America/St_Lucia",
                  "Pacific/Tongatapu",
                  "Africa/Casablanca",
                  "Asia/Magadan",
                  "Asia/Chita",
                  "America/Moncton",
                  "Asia/Beirut",
                  "Indian/Chagos",
                  "Antarctica/Syowa",
                  "America/Indiana/Indianapolis",
                  "Etc/GMT-1",
                  "Asia/Colombo",
                  "America/Nassau",
                  "Europe/Chisinau",
                  "Etc/GMT+0",
                  "Greenwich",
                  "Africa/Porto-Novo",
                  "Turkey",
                  "Etc/UCT",
                  "America/Mexico_City",
                  "America/Cambridge_Bay",
                  "Antarctica/Davis",
                  "America/Pangnirtung",
                  "Asia/Vientiane",
                  "Europe/Podgorica",
                  "W-SU",
                  "America/Ensenada",
                  "Asia/Novosibirsk",
                  "Africa/Ndjamena",
                  "America/Antigua",
                  "America/La_Paz",
                  "America/Miquelon",
                  "Australia/Queensland",
                  "America/Indiana/Petersburg",
                  "America/Caracas",
                  "Europe/Vienna",
                  "Australia/North",
                  "Asia/Dili",
                  "America/Bogota",
                  "Africa/Gaborone",
                  "Asia/Choibalsan",
                  "UCT",
                  "America/Sitka",
                  "Europe/Belgrade",
                  "Atlantic/Reykjavik",
                  "Africa/Blantyre",
                  "Africa/Monrovia",
                  "Pacific/Efate",
                  "US/Mountain",
                  "Asia/Pyongyang",
                  "MST7MDT",
                  "America/Denver",
                  "Asia/Kamchatka",
                  "Etc/GMT+2",
                  "Antarctica/Macquarie",
                  "Antarctica/Troll",
                  "Canada/Atlantic",
                  "EST",
                  "Zulu",
                  "America/Nome",
                  "America/Halifax",
                  "CST6CDT",
                  "Japan",
                  "ROK",
                  "Indian/Mahe",
                  "Europe/Kyiv",
                  "Australia/South",
                  "America/Chicago",
                  "Pacific/Port_Moresby",
                  "America/Tijuana",
                  "America/Winnipeg",
                  "Etc/GMT0",
                  "Mexico/BajaNorte",
                  "America/Lower_Princes",
                  "Pacific/Wake",
                  "America/St_Johns",
                  "US/Arizona",
                  "Africa/Conakry",
                  "Europe/Guernsey",
                  "Africa/Tripoli",
                  "US/Indiana-Starke",
                  "Antarctica/McMurdo",
                  "Pacific/Tahiti",
                  "America/Indiana/Tell_City",
                  "GMT-0",
                  "America/Indianapolis",
                  "America/Merida",
                  "America/Jujuy",
                  "Asia/Anadyr",
                  "America/Hermosillo",
                  "Australia/Tasmania",
                  "America/Menominee",
                  "Asia/Kuwait",
                  "Asia/Hong_Kong",
                  "Africa/Banjul",
                  "Africa/Nouakchott",
                  "Africa/Algiers",
                  "Indian/Antananarivo",
                  "America/Detroit",
                  "WET",
                  "America/North_Dakota/Beulah",
                  "Asia/Ust-Nera",
                  "Etc/GMT+4",
                  "Etc/GMT-2",
                  "Asia/Kathmandu",
                  "Europe/Moscow",
                  "Asia/Jakarta",
                  "Pacific/Gambier",
                  "Pacific/Kanton",
                  "Australia/NSW",
                  "Africa/Djibouti",
                  "Etc/GMT+3",
                  "America/Porto_Acre",
                  "Africa/Khartoum",
                  "Etc/Zulu",
                  "Etc/GMT-11",
                  "America/Yakutat",
                  "localtime",
                  "Atlantic/Faroe",
                  "America/Punta_Arenas",
                  "America/Aruba",
                  "Africa/Sao_Tome",
                  "Europe/Zurich",
                  "Pacific/Kwajalein",
                  "Canada/Saskatchewan",
                  "America/Fort_Wayne",
                  "Asia/Harbin",
                  "Asia/Macau",
                  "Europe/Sofia",
                  "Europe/Berlin",
                  "Europe/Malta",
                  "Europe/Volgograd",
                  "Pacific/Palau",
                  "Asia/Kuala_Lumpur",
                  "Europe/Bucharest",
                  "Asia/Qatar",
                  "Pacific/Nauru",
                  "Africa/Bujumbura",
                  "America/Indiana/Knox",
                  "Asia/Yerevan",
                  "Atlantic/Cape_Verde",
                  "America/Dawson",
                  "America/St_Vincent",
                  "Asia/Dacca",
                  "America/Indiana/Vincennes",
                  "America/Jamaica",
                  "Africa/Maputo",
                  "Canada/Mountain",
                  "Pacific/Marquesas",
                  "Europe/Monaco",
                  "Pacific/Guadalcanal",
                  "Asia/Tbilisi",
                  "Atlantic/Bermuda",
                  "America/Guyana",
                  "Australia/Darwin",
                  "Asia/Vladivostok",
                  "Australia/Perth",
                  "Africa/Harare",
                  "Asia/Muscat",
                  "America/Argentina/Ushuaia",
                  "Etc/GMT+8",
                  "Asia/Tashkent",
                  "Asia/Seoul",
                  "America/Regina",
                  "America/Barbados",
                  "Africa/Accra",
                  "Canada/Pacific",
                  "America/Porto_Velho",
                  "Europe/Tirane",
                  "Europe/Amsterdam",
                  "America/Mendoza",
                  "Africa/Cairo",
                  "Pacific/Bougainville",
                  "America/Scoresbysund",
                  "America/Mazatlan",
                  "America/Grenada",
                  "America/Argentina/Cordoba",
                  "Asia/Kuching",
                  "Asia/Almaty",
                  "Asia/Srednekolymsk",
                  "America/Boa_Vista",
                  "America/Phoenix",
                  "America/Toronto",
                  "America/Blanc-Sablon",
                  "Asia/Kolkata",
                  "Libya",
                  "PRC",
                  "Antarctica/Rothera",
                  "Europe/Helsinki",
                  "America/Metlakatla",
                  "Atlantic/Faeroe",
                  "Asia/Chongqing",
                  "America/Danmarkshavn",
                  "America/New_York",
                  "Europe/Athens",
                  "Asia/Karachi",
                  "Pacific/Johnston",
                  "Etc/GMT+1",
                  "Etc/GMT+11",
                  "Europe/Tallinn",
                  "Etc/GMT-4",
                  "America/Argentina/San_Luis",
                  "America/Fort_Nelson",
                  "Etc/GMT+5",
                  "America/St_Thomas",
                  "Asia/Ashkhabad",
                  "Europe/Paris",
                  "Factory",
                  "America/Martinique",
                  "Israel",
                  "America/Asuncion",
                  "Asia/Qyzylorda",
                  "Asia/Katmandu",
                  "America/Santa_Isabel",
                  "Asia/Phnom_Penh",
                  "Africa/Tunis",
                  "Australia/West",
                  "Asia/Singapore",
                  "US/Central",
                  "Pacific/Niue",
                  "Asia/Atyrau",
                  "MET",
                  "Africa/Nairobi",
                  "Europe/Uzhgorod",
                  "Pacific/Apia",
                  "America/Tegucigalpa",
                  "Africa/Maseru",
                  "Atlantic/Stanley",
                  "Pacific/Funafuti",
                  "America/Monterrey",
                  "Europe/Gibraltar",
                  "Chile/Continental",
                  "America/Guatemala",
                  "Europe/Tiraspol",
                  "America/North_Dakota/New_Salem",
                  "America/Buenos_Aires",
                  "America/Virgin",
                  "America/Cayman",
                  "Asia/Thimbu",
                  "Europe/Busingen",
                  "Asia/Gaza",
                  "America/Ciudad_Juarez",
                  "Asia/Damascus",
                  "MST",
                  "Europe/Bratislava",
                  "Australia/Melbourne",
                  "GB",
                  "Australia/LHI",
                  "Africa/Mbabane",
                  "Europe/London",
                  "America/Argentina/Mendoza",
                  "Australia/Currie",
                  "HST",
                  "Navajo",
                  "Africa/Juba",
                  "America/Indiana/Vevay"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Europe/Stockholm"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Åtgärder",
                "dynamic": false,
                "info": "Ändra verktygsnamn och beskrivningar för att hjälpa agenter förstå när de ska använda varje verktyg.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "timezone": {
                        "default": "UTC",
                        "description": "Välj tidszonen för aktuellt datum och tid.",
                        "enum": [
                          "Asia/Irkutsk",
                          "Africa/Bamako",
                          "Africa/Kigali",
                          "Asia/Rangoon",
                          "America/Port-au-Prince",
                          "Africa/El_Aaiun",
                          "Asia/Tomsk",
                          "Asia/Ulaanbaatar",
                          "America/St_Kitts",
                          "CET",
                          "Europe/Zaporozhye",
                          "Asia/Amman",
                          "America/Atikokan",
                          "Europe/Kaliningrad",
                          "Africa/Lusaka",
                          "Pacific/Midway",
                          "America/Belize",
                          "America/Marigot",
                          "Africa/Kampala",
                          "Africa/Dakar",
                          "Australia/Eucla",
                          "Asia/Aqtau",
                          "America/Creston",
                          "America/Thunder_Bay",
                          "America/Atka",
                          "Asia/Shanghai",
                          "Etc/GMT+12",
                          "Africa/Douala",
                          "Indian/Mauritius",
                          "America/Yellowknife",
                          "Africa/Mogadishu",
                          "America/Glace_Bay",
                          "Etc/GMT-10",
                          "Universal",
                          "Africa/Lubumbashi",
                          "Atlantic/Azores",
                          "Asia/Manila",
                          "Europe/Mariehamn",
                          "Pacific/Chuuk",
                          "America/Grand_Turk",
                          "America/Araguaina",
                          "America/Nuuk",
                          "Asia/Dubai",
                          "Pacific/Chatham",
                          "Kwajalein",
                          "GMT",
                          "US/Eastern",
                          "Etc/GMT-13",
                          "America/Argentina/San_Juan",
                          "Antarctica/Mawson",
                          "America/Anguilla",
                          "Africa/Bangui",
                          "America/Boise",
                          "Pacific/Yap",
                          "Asia/Qostanay",
                          "America/Thule",
                          "America/Guayaquil",
                          "Portugal",
                          "America/Rosario",
                          "Brazil/Acre",
                          "Etc/GMT-6",
                          "Etc/GMT-3",
                          "America/Sao_Paulo",
                          "Australia/Lindeman",
                          "America/North_Dakota/Center",
                          "Pacific/Kiritimati",
                          "Etc/UTC",
                          "America/Paramaribo",
                          "America/Guadeloupe",
                          "Asia/Urumqi",
                          "Pacific/Auckland",
                          "Pacific/Guam",
                          "Asia/Hovd",
                          "Pacific/Samoa",
                          "Africa/Niamey",
                          "Europe/Kiev",
                          "America/Matamoros",
                          "EET",
                          "US/Michigan",
                          "America/Godthab",
                          "Etc/GMT-7",
                          "Asia/Krasnoyarsk",
                          "Europe/Vatican",
                          "America/Havana",
                          "America/Port_of_Spain",
                          "Africa/Malabo",
                          "Antarctica/Casey",
                          "America/Dominica",
                          "Pacific/Truk",
                          "Asia/Brunei",
                          "America/Whitehorse",
                          "Asia/Baku",
                          "America/Rankin_Inlet",
                          "Asia/Khandyga",
                          "Europe/Oslo",
                          "America/Cordoba",
                          "America/Curacao",
                          "Asia/Hebron",
                          "Europe/Ulyanovsk",
                          "Asia/Tokyo",
                          "Eire",
                          "America/Bahia_Banderas",
                          "Europe/Warsaw",
                          "GMT+0",
                          "Pacific/Galapagos",
                          "Etc/GMT-0",
                          "Europe/Samara",
                          "GB-Eire",
                          "Europe/Lisbon",
                          "Pacific/Noumea",
                          "Europe/Saratov",
                          "Europe/Rome",
                          "Asia/Kabul",
                          "America/Coyhaique",
                          "Africa/Bissau",
                          "Asia/Novokuznetsk",
                          "Asia/Barnaul",
                          "America/Cayenne",
                          "Arctic/Longyearbyen",
                          "Asia/Bahrain",
                          "NZ-CHAT",
                          "Europe/Belfast",
                          "Europe/Stockholm",
                          "America/Santo_Domingo",
                          "Australia/Victoria",
                          "Cuba",
                          "America/Goose_Bay",
                          "Europe/Nicosia",
                          "Australia/Canberra",
                          "Asia/Macao",
                          "Asia/Samarkand",
                          "America/Argentina/La_Rioja",
                          "Asia/Kashgar",
                          "Asia/Jerusalem",
                          "America/Argentina/Salta",
                          "America/Lima",
                          "Atlantic/Madeira",
                          "Africa/Brazzaville",
                          "Australia/Yancowinna",
                          "Asia/Taipei",
                          "Canada/Yukon",
                          "Etc/GMT+7",
                          "America/Maceio",
                          "Europe/Riga",
                          "America/Swift_Current",
                          "Antarctica/South_Pole",
                          "Europe/Budapest",
                          "America/Argentina/ComodRivadavia",
                          "Brazil/DeNoronha",
                          "EST5EDT",
                          "America/Rio_Branco",
                          "Atlantic/South_Georgia",
                          "America/Manaus",
                          "Australia/ACT",
                          "Etc/GMT+9",
                          "America/Adak",
                          "GMT0",
                          "America/Recife",
                          "Brazil/East",
                          "Pacific/Ponape",
                          "Asia/Tehran",
                          "America/Eirunepe",
                          "Europe/Copenhagen",
                          "US/Pacific",
                          "Europe/Brussels",
                          "Indian/Mayotte",
                          "Australia/Adelaide",
                          "Antarctica/DumontDUrville",
                          "Europe/Vaduz",
                          "Asia/Tel_Aviv",
                          "Asia/Riyadh",
                          "Etc/GMT-5",
                          "Africa/Freetown",
                          "Asia/Famagusta",
                          "Europe/Simferopol",
                          "Poland",
                          "Brazil/West",
                          "Pacific/Honolulu",
                          "America/Shiprock",
                          "Egypt",
                          "America/El_Salvador",
                          "America/Resolute",
                          "Europe/Andorra",
                          "Pacific/Fakaofo",
                          "Asia/Bishkek",
                          "America/Argentina/Buenos_Aires",
                          "PST8PDT",
                          "America/Kentucky/Monticello",
                          "US/Samoa",
                          "America/Panama",
                          "America/Cancun",
                          "America/Los_Angeles",
                          "Europe/Kirov",
                          "UTC",
                          "Hongkong",
                          "Asia/Baghdad",
                          "US/East-Indiana",
                          "Africa/Kinshasa",
                          "America/Managua",
                          "Asia/Yekaterinburg",
                          "America/Montserrat",
                          "America/Argentina/Rio_Gallegos",
                          "Africa/Lagos",
                          "America/Argentina/Jujuy",
                          "Europe/Minsk",
                          "Asia/Ujung_Pandang",
                          "America/Catamarca",
                          "Africa/Ceuta",
                          "America/Belem",
                          "Chile/EasterIsland",
                          "Africa/Luanda",
                          "Europe/Prague",
                          "Asia/Yakutsk",
                          "Asia/Saigon",
                          "America/Montreal",
                          "Iran",
                          "Europe/Luxembourg",
                          "Indian/Comoro",
                          "Asia/Dushanbe",
                          "Asia/Calcutta",
                          "America/Santiago",
                          "America/Kentucky/Louisville",
                          "America/Anchorage",
                          "Asia/Yangon",
                          "Mexico/General",
                          "Etc/GMT+6",
                          "America/Knox_IN",
                          "America/Juneau",
                          "America/Puerto_Rico",
                          "US/Hawaii",
                          "America/Indiana/Winamac",
                          "Australia/Sydney",
                          "America/Santarem",
                          "America/Campo_Grande",
                          "Asia/Sakhalin",
                          "Australia/Hobart",
                          "Etc/GMT-14",
                          "Jamaica",
                          "NZ",
                          "Asia/Jayapura",
                          "Africa/Abidjan",
                          "Asia/Ulan_Bator",
                          "America/St_Barthelemy",
                          "Atlantic/St_Helena",
                          "Mexico/BajaSur",
                          "Europe/Vilnius",
                          "Pacific/Wallis",
                          "Asia/Ho_Chi_Minh",
                          "Asia/Thimphu",
                          "America/Tortola",
                          "Asia/Omsk",
                          "Asia/Pontianak",
                          "Asia/Nicosia",
                          "Canada/Newfoundland",
                          "Africa/Lome",
                          "Pacific/Pitcairn",
                          "America/Louisville",
                          "Europe/Madrid",
                          "Europe/San_Marino",
                          "Europe/Sarajevo",
                          "Africa/Asmera",
                          "America/Dawson_Creek",
                          "America/Kralendijk",
                          "America/Vancouver",
                          "America/Argentina/Catamarca",
                          "Etc/Greenwich",
                          "Atlantic/Canary",
                          "Indian/Maldives",
                          "Australia/Lord_Howe",
                          "Indian/Christmas",
                          "Etc/GMT-9",
                          "Etc/GMT",
                          "Europe/Skopje",
                          "America/Ojinaga",
                          "Pacific/Saipan",
                          "America/Cuiaba",
                          "Africa/Addis_Ababa",
                          "Pacific/Tarawa",
                          "Canada/Eastern",
                          "Asia/Bangkok",
                          "Europe/Isle_of_Man",
                          "Africa/Johannesburg",
                          "Europe/Zagreb",
                          "Asia/Chungking",
                          "Pacific/Kosrae",
                          "Asia/Oral",
                          "Asia/Istanbul",
                          "Atlantic/Jan_Mayen",
                          "Asia/Aqtobe",
                          "Etc/Universal",
                          "Australia/Broken_Hill",
                          "America/Argentina/Tucuman",
                          "Asia/Aden",
                          "Indian/Reunion",
                          "Etc/GMT-8",
                          "Europe/Dublin",
                          "America/Indiana/Marengo",
                          "Europe/Astrakhan",
                          "Pacific/Majuro",
                          "Pacific/Norfolk",
                          "America/Coral_Harbour",
                          "America/Noronha",
                          "Pacific/Enderbury",
                          "Pacific/Fiji",
                          "Pacific/Pohnpei",
                          "America/Chihuahua",
                          "America/Costa_Rica",
                          "Africa/Timbuktu",
                          "Pacific/Rarotonga",
                          "Africa/Windhoek",
                          "America/Inuvik",
                          "Africa/Ouagadougou",
                          "Indian/Kerguelen",
                          "Europe/Istanbul",
                          "Canada/Central",
                          "Pacific/Easter",
                          "Europe/Ljubljana",
                          "Indian/Cocos",
                          "Africa/Libreville",
                          "Asia/Ashgabat",
                          "US/Aleutian",
                          "ROC",
                          "America/Edmonton",
                          "Asia/Makassar",
                          "Singapore",
                          "Etc/GMT-12",
                          "America/Iqaluit",
                          "Antarctica/Vostok",
                          "America/Montevideo",
                          "Africa/Dar_es_Salaam",
                          "America/Rainy_River",
                          "America/Fortaleza",
                          "Pacific/Pago_Pago",
                          "Australia/Brisbane",
                          "Iceland",
                          "America/Bahia",
                          "Asia/Dhaka",
                          "Europe/Jersey",
                          "Antarctica/Palmer",
                          "Africa/Asmara",
                          "America/Nipigon",
                          "US/Alaska",
                          "Etc/GMT+10",
                          "America/St_Lucia",
                          "Pacific/Tongatapu",
                          "Africa/Casablanca",
                          "Asia/Magadan",
                          "Asia/Chita",
                          "America/Moncton",
                          "Asia/Beirut",
                          "Indian/Chagos",
                          "Antarctica/Syowa",
                          "America/Indiana/Indianapolis",
                          "Etc/GMT-1",
                          "Asia/Colombo",
                          "America/Nassau",
                          "Europe/Chisinau",
                          "Etc/GMT+0",
                          "Greenwich",
                          "Africa/Porto-Novo",
                          "Turkey",
                          "Etc/UCT",
                          "America/Mexico_City",
                          "America/Cambridge_Bay",
                          "Antarctica/Davis",
                          "America/Pangnirtung",
                          "Asia/Vientiane",
                          "Europe/Podgorica",
                          "W-SU",
                          "America/Ensenada",
                          "Asia/Novosibirsk",
                          "Africa/Ndjamena",
                          "America/Antigua",
                          "America/La_Paz",
                          "America/Miquelon",
                          "Australia/Queensland",
                          "America/Indiana/Petersburg",
                          "America/Caracas",
                          "Europe/Vienna",
                          "Australia/North",
                          "Asia/Dili",
                          "America/Bogota",
                          "Africa/Gaborone",
                          "Asia/Choibalsan",
                          "UCT",
                          "America/Sitka",
                          "Europe/Belgrade",
                          "Atlantic/Reykjavik",
                          "Africa/Blantyre",
                          "Africa/Monrovia",
                          "Pacific/Efate",
                          "US/Mountain",
                          "Asia/Pyongyang",
                          "MST7MDT",
                          "America/Denver",
                          "Asia/Kamchatka",
                          "Etc/GMT+2",
                          "Antarctica/Macquarie",
                          "Antarctica/Troll",
                          "Canada/Atlantic",
                          "EST",
                          "Zulu",
                          "America/Nome",
                          "America/Halifax",
                          "CST6CDT",
                          "Japan",
                          "ROK",
                          "Indian/Mahe",
                          "Europe/Kyiv",
                          "Australia/South",
                          "America/Chicago",
                          "Pacific/Port_Moresby",
                          "America/Tijuana",
                          "America/Winnipeg",
                          "Etc/GMT0",
                          "Mexico/BajaNorte",
                          "America/Lower_Princes",
                          "Pacific/Wake",
                          "America/St_Johns",
                          "US/Arizona",
                          "Africa/Conakry",
                          "Europe/Guernsey",
                          "Africa/Tripoli",
                          "US/Indiana-Starke",
                          "Antarctica/McMurdo",
                          "Pacific/Tahiti",
                          "America/Indiana/Tell_City",
                          "GMT-0",
                          "America/Indianapolis",
                          "America/Merida",
                          "America/Jujuy",
                          "Asia/Anadyr",
                          "America/Hermosillo",
                          "Australia/Tasmania",
                          "America/Menominee",
                          "Asia/Kuwait",
                          "Asia/Hong_Kong",
                          "Africa/Banjul",
                          "Africa/Nouakchott",
                          "Africa/Algiers",
                          "Indian/Antananarivo",
                          "America/Detroit",
                          "WET",
                          "America/North_Dakota/Beulah",
                          "Asia/Ust-Nera",
                          "Etc/GMT+4",
                          "Etc/GMT-2",
                          "Asia/Kathmandu",
                          "Europe/Moscow",
                          "Asia/Jakarta",
                          "Pacific/Gambier",
                          "Pacific/Kanton",
                          "Australia/NSW",
                          "Africa/Djibouti",
                          "Etc/GMT+3",
                          "America/Porto_Acre",
                          "Africa/Khartoum",
                          "Etc/Zulu",
                          "Etc/GMT-11",
                          "America/Yakutat",
                          "localtime",
                          "Atlantic/Faroe",
                          "America/Punta_Arenas",
                          "America/Aruba",
                          "Africa/Sao_Tome",
                          "Europe/Zurich",
                          "Pacific/Kwajalein",
                          "Canada/Saskatchewan",
                          "America/Fort_Wayne",
                          "Asia/Harbin",
                          "Asia/Macau",
                          "Europe/Sofia",
                          "Europe/Berlin",
                          "Europe/Malta",
                          "Europe/Volgograd",
                          "Pacific/Palau",
                          "Asia/Kuala_Lumpur",
                          "Europe/Bucharest",
                          "Asia/Qatar",
                          "Pacific/Nauru",
                          "Africa/Bujumbura",
                          "America/Indiana/Knox",
                          "Asia/Yerevan",
                          "Atlantic/Cape_Verde",
                          "America/Dawson",
                          "America/St_Vincent",
                          "Asia/Dacca",
                          "America/Indiana/Vincennes",
                          "America/Jamaica",
                          "Africa/Maputo",
                          "Canada/Mountain",
                          "Pacific/Marquesas",
                          "Europe/Monaco",
                          "Pacific/Guadalcanal",
                          "Asia/Tbilisi",
                          "Atlantic/Bermuda",
                          "America/Guyana",
                          "Australia/Darwin",
                          "Asia/Vladivostok",
                          "Australia/Perth",
                          "Africa/Harare",
                          "Asia/Muscat",
                          "America/Argentina/Ushuaia",
                          "Etc/GMT+8",
                          "Asia/Tashkent",
                          "Asia/Seoul",
                          "America/Regina",
                          "America/Barbados",
                          "Africa/Accra",
                          "Canada/Pacific",
                          "America/Porto_Velho",
                          "Europe/Tirane",
                          "Europe/Amsterdam",
                          "America/Mendoza",
                          "Africa/Cairo",
                          "Pacific/Bougainville",
                          "America/Scoresbysund",
                          "America/Mazatlan",
                          "America/Grenada",
                          "America/Argentina/Cordoba",
                          "Asia/Kuching",
                          "Asia/Almaty",
                          "Asia/Srednekolymsk",
                          "America/Boa_Vista",
                          "America/Phoenix",
                          "America/Toronto",
                          "America/Blanc-Sablon",
                          "Asia/Kolkata",
                          "Libya",
                          "PRC",
                          "Antarctica/Rothera",
                          "Europe/Helsinki",
                          "America/Metlakatla",
                          "Atlantic/Faeroe",
                          "Asia/Chongqing",
                          "America/Danmarkshavn",
                          "America/New_York",
                          "Europe/Athens",
                          "Asia/Karachi",
                          "Pacific/Johnston",
                          "Etc/GMT+1",
                          "Etc/GMT+11",
                          "Europe/Tallinn",
                          "Etc/GMT-4",
                          "America/Argentina/San_Luis",
                          "America/Fort_Nelson",
                          "Etc/GMT+5",
                          "America/St_Thomas",
                          "Asia/Ashkhabad",
                          "Europe/Paris",
                          "Factory",
                          "America/Martinique",
                          "Israel",
                          "America/Asuncion",
                          "Asia/Qyzylorda",
                          "Asia/Katmandu",
                          "America/Santa_Isabel",
                          "Asia/Phnom_Penh",
                          "Africa/Tunis",
                          "Australia/West",
                          "Asia/Singapore",
                          "US/Central",
                          "Pacific/Niue",
                          "Asia/Atyrau",
                          "MET",
                          "Africa/Nairobi",
                          "Europe/Uzhgorod",
                          "Pacific/Apia",
                          "America/Tegucigalpa",
                          "Africa/Maseru",
                          "Atlantic/Stanley",
                          "Pacific/Funafuti",
                          "America/Monterrey",
                          "Europe/Gibraltar",
                          "Chile/Continental",
                          "America/Guatemala",
                          "Europe/Tiraspol",
                          "America/North_Dakota/New_Salem",
                          "America/Buenos_Aires",
                          "America/Virgin",
                          "America/Cayman",
                          "Asia/Thimbu",
                          "Europe/Busingen",
                          "Asia/Gaza",
                          "America/Ciudad_Juarez",
                          "Asia/Damascus",
                          "MST",
                          "Europe/Bratislava",
                          "Australia/Melbourne",
                          "GB",
                          "Australia/LHI",
                          "Africa/Mbabane",
                          "Europe/London",
                          "America/Argentina/Mendoza",
                          "Australia/Currie",
                          "HST",
                          "Navajo",
                          "Africa/Juba",
                          "America/Indiana/Vevay"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Returnerar aktuellt datum och tid i den valda tidszonen.",
                    "display_description": "Returnerar aktuellt datum och tid i den valda tidszonen.",
                    "display_name": "get_current_date",
                    "name": "get_current_date",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_current_date"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "CurrentDate"
        },
        "dragging": false,
        "id": "CurrentDate-wG7Hr",
        "measured": {
          "height": 217,
          "width": 320
        },
        "position": {
          "x": 2124.3195157404944,
          "y": 327.2490159197638
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -921.8675398674411,
      "y": -5.0193244299356365,
      "zoom": 0.7258574012051596
    }
  },
  "description": "A simple but powerful starter agent.",
  "endpoint_name": null,
  "id": "f367b850-4b93-47a2-9cc2-b6562a674ba4",
  "is_component": false,
  "last_tested_version": "1.5.0.post3",
  "name": "SIMPLIFIED",
  "tags": [
    "assistants",
    "agents"
  ]
}